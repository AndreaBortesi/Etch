Grammar:

Rule 0     S' -> statements
Rule 1     statements -> statement
Rule 2     statements -> statements statement
Rule 3     statement -> command SEMICOLON
Rule 4     statement -> command NEWLINE
Rule 5     empty -> <empty>
Rule 6     command -> inplace
Rule 7     command -> somecrement
Rule 8     command -> assign
Rule 9     command -> count_block
Rule 10    command -> forever_block
Rule 11    command -> while_block
Rule 12    command -> for_block
Rule 13    command -> if_block
Rule 14    command -> expr
Rule 15    command -> empty
Rule 16    args -> expr
Rule 17    args -> args expr
Rule 18    if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
Rule 19    if_block -> IF error THEN NEWLINE statements elifs DONE
Rule 20    if_block -> IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
Rule 21    if_block -> IF error THEN NEWLINE statements DONE
Rule 22    if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
Rule 23    if_block -> IF expr THEN NEWLINE statements elifs DONE
Rule 24    if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
Rule 25    if_block -> IF expr THEN NEWLINE statements DONE
Rule 26    elifs -> elif_block
Rule 27    elifs -> elifs elif_block
Rule 28    elif_block -> ELSE IF command THEN statements
Rule 29    while_block -> WHILE command OPEN_CB statements CLOSE_CB
Rule 30    while_block -> WHILE command DO statements DONE
Rule 31    for_block -> FOR ID IN command DO statements DONE
Rule 32    forever_block -> DO statements FOREVER
Rule 33    count_block -> DO NEWLINE statements expr TIMES
Rule 34    expr -> OPEN_SQ list_items CLOSE_SQ
Rule 35    expr -> STRING
Rule 36    expr -> FLOAT
Rule 37    expr -> INTEGER
Rule 38    expr -> COLON ID SEMICOLON
Rule 39    expr -> COLON ID args SEMICOLON
Rule 40    expr -> expr COLON ID SEMICOLON
Rule 41    expr -> expr COLON ID args SEMICOLON
Rule 42    expr -> ID
Rule 43    expr -> NOT expr
Rule 44    expr -> SUB expr  [precedence=right, level=4]
Rule 45    expr -> expr NE expr  [precedence=nonassoc, level=1]
Rule 46    expr -> expr EQ expr  [precedence=nonassoc, level=1]
Rule 47    expr -> expr GE expr  [precedence=nonassoc, level=1]
Rule 48    expr -> expr LE expr  [precedence=nonassoc, level=1]
Rule 49    expr -> expr GT expr  [precedence=nonassoc, level=1]
Rule 50    expr -> expr LT expr  [precedence=nonassoc, level=1]
Rule 51    expr -> expr EXP expr
Rule 52    expr -> expr MOD expr  [precedence=left, level=3]
Rule 53    expr -> expr FLOORDIV expr  [precedence=left, level=3]
Rule 54    expr -> expr TRUEDIV expr  [precedence=left, level=3]
Rule 55    expr -> expr MUL expr  [precedence=left, level=3]
Rule 56    expr -> expr SUB expr  [precedence=left, level=2]
Rule 57    expr -> expr ADD expr  [precedence=left, level=2]
Rule 58    somecrement -> ID DECREMENT
Rule 59    somecrement -> ID INCREMENT
Rule 60    inplace -> ID IP_DIV expr
Rule 61    inplace -> ID IP_MUL expr
Rule 62    inplace -> ID IP_SUB expr
Rule 63    inplace -> ID IP_ADD expr
Rule 64    assign -> ID ASSIGN expr
Rule 65    list_items -> expr
Rule 66    list_items -> list_items COMMA expr

Unused terminals:

    AS
    AND
    OPEN
    OR
    USING
    IS
    RETURN
    CLASS
    BUILDER
    FROM
    DEFINE

Terminals, with rules where they appear:

ADD                  : 57
AND                  : 
AS                   : 
ASSIGN               : 64
BUILDER              : 
CLASS                : 
CLOSE_CB             : 29
CLOSE_SQ             : 34
COLON                : 38 39 40 41
COMMA                : 66
DECREMENT            : 58
DEFINE               : 
DO                   : 30 31 32 33
DONE                 : 18 19 20 21 22 23 24 25 30 31
ELSE                 : 18 20 22 24 28
EQ                   : 46
EXP                  : 51
FLOAT                : 36
FLOORDIV             : 53
FOR                  : 31
FOREVER              : 32
FROM                 : 
GE                   : 47
GT                   : 49
ID                   : 31 38 39 40 41 42 58 59 60 61 62 63 64
IF                   : 18 19 20 21 22 23 24 25 28
IN                   : 31
INCREMENT            : 59
INTEGER              : 37
IP_ADD               : 63
IP_DIV               : 60
IP_MUL               : 61
IP_SUB               : 62
IS                   : 
LE                   : 48
LT                   : 50
MOD                  : 52
MUL                  : 55
NE                   : 45
NEWLINE              : 4 18 18 19 20 20 21 22 22 23 24 24 25 33
NOT                  : 43
OPEN                 : 
OPEN_CB              : 29
OPEN_SQ              : 34
OR                   : 
RETURN               : 
SEMICOLON            : 3 38 39 40 41
STRING               : 35
SUB                  : 44 56
THEN                 : 18 19 20 21 22 23 24 25 28
TIMES                : 33
TRUEDIV              : 54
USING                : 
WHILE                : 29 30
error                : 18 19 20 21

Nonterminals, with rules where they appear:

args                 : 17 39 41
assign               : 8
command              : 3 4 28 29 30 31
count_block          : 9
elif_block           : 26 27
elifs                : 18 19 22 23 27
empty                : 15
expr                 : 14 16 17 22 23 24 25 33 40 41 43 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 60 61 62 63 64 65 66
for_block            : 12
forever_block        : 10
if_block             : 13
inplace              : 6
list_items           : 34 66
somecrement          : 7
statement            : 1 2
statements           : 2 18 18 19 20 20 21 22 22 23 24 24 25 28 29 30 31 32 33 0
while_block          : 11


state 0

    (0) S' -> . statements
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    statements                     shift and go to state 1
    statement                      shift and go to state 2
    command                        shift and go to state 3
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    expr                           shift and go to state 12
    empty                          shift and go to state 13

state 1

    (0) S' -> statements .
    (2) statements -> statements . statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    statement                      shift and go to state 26
    command                        shift and go to state 3
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    expr                           shift and go to state 12
    empty                          shift and go to state 13

state 2

    (1) statements -> statement .
    ID              reduce using rule 1 (statements -> statement .)
    DO              reduce using rule 1 (statements -> statement .)
    WHILE           reduce using rule 1 (statements -> statement .)
    FOR             reduce using rule 1 (statements -> statement .)
    IF              reduce using rule 1 (statements -> statement .)
    OPEN_SQ         reduce using rule 1 (statements -> statement .)
    STRING          reduce using rule 1 (statements -> statement .)
    FLOAT           reduce using rule 1 (statements -> statement .)
    INTEGER         reduce using rule 1 (statements -> statement .)
    COLON           reduce using rule 1 (statements -> statement .)
    NOT             reduce using rule 1 (statements -> statement .)
    SUB             reduce using rule 1 (statements -> statement .)
    $end            reduce using rule 1 (statements -> statement .)
    SEMICOLON       reduce using rule 1 (statements -> statement .)
    NEWLINE         reduce using rule 1 (statements -> statement .)
    FOREVER         reduce using rule 1 (statements -> statement .)
    CLOSE_CB        reduce using rule 1 (statements -> statement .)
    DONE            reduce using rule 1 (statements -> statement .)
    ELSE            reduce using rule 1 (statements -> statement .)


state 3

    (3) statement -> command . SEMICOLON
    (4) statement -> command . NEWLINE
    SEMICOLON       shift and go to state 27
    NEWLINE         shift and go to state 28


state 4

    (6) command -> inplace .
    SEMICOLON       reduce using rule 6 (command -> inplace .)
    NEWLINE         reduce using rule 6 (command -> inplace .)
    OPEN_CB         reduce using rule 6 (command -> inplace .)
    DO              reduce using rule 6 (command -> inplace .)
    THEN            reduce using rule 6 (command -> inplace .)


state 5

    (7) command -> somecrement .
    SEMICOLON       reduce using rule 7 (command -> somecrement .)
    NEWLINE         reduce using rule 7 (command -> somecrement .)
    OPEN_CB         reduce using rule 7 (command -> somecrement .)
    DO              reduce using rule 7 (command -> somecrement .)
    THEN            reduce using rule 7 (command -> somecrement .)


state 6

    (8) command -> assign .
    SEMICOLON       reduce using rule 8 (command -> assign .)
    NEWLINE         reduce using rule 8 (command -> assign .)
    OPEN_CB         reduce using rule 8 (command -> assign .)
    DO              reduce using rule 8 (command -> assign .)
    THEN            reduce using rule 8 (command -> assign .)


state 7

    (9) command -> count_block .
    SEMICOLON       reduce using rule 9 (command -> count_block .)
    NEWLINE         reduce using rule 9 (command -> count_block .)
    OPEN_CB         reduce using rule 9 (command -> count_block .)
    DO              reduce using rule 9 (command -> count_block .)
    THEN            reduce using rule 9 (command -> count_block .)


state 8

    (10) command -> forever_block .
    SEMICOLON       reduce using rule 10 (command -> forever_block .)
    NEWLINE         reduce using rule 10 (command -> forever_block .)
    OPEN_CB         reduce using rule 10 (command -> forever_block .)
    DO              reduce using rule 10 (command -> forever_block .)
    THEN            reduce using rule 10 (command -> forever_block .)


state 9

    (11) command -> while_block .
    SEMICOLON       reduce using rule 11 (command -> while_block .)
    NEWLINE         reduce using rule 11 (command -> while_block .)
    OPEN_CB         reduce using rule 11 (command -> while_block .)
    DO              reduce using rule 11 (command -> while_block .)
    THEN            reduce using rule 11 (command -> while_block .)


state 10

    (12) command -> for_block .
    SEMICOLON       reduce using rule 12 (command -> for_block .)
    NEWLINE         reduce using rule 12 (command -> for_block .)
    OPEN_CB         reduce using rule 12 (command -> for_block .)
    DO              reduce using rule 12 (command -> for_block .)
    THEN            reduce using rule 12 (command -> for_block .)


state 11

    (13) command -> if_block .
    SEMICOLON       reduce using rule 13 (command -> if_block .)
    NEWLINE         reduce using rule 13 (command -> if_block .)
    OPEN_CB         reduce using rule 13 (command -> if_block .)
    DO              reduce using rule 13 (command -> if_block .)
    THEN            reduce using rule 13 (command -> if_block .)


state 12

    (14) command -> expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
    SEMICOLON       reduce using rule 14 (command -> expr .)
    NEWLINE         reduce using rule 14 (command -> expr .)
    OPEN_CB         reduce using rule 14 (command -> expr .)
    DO              reduce using rule 14 (command -> expr .)
    THEN            reduce using rule 14 (command -> expr .)
    COLON           shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    FLOORDIV        shift and go to state 38
    TRUEDIV         shift and go to state 39
    MUL             shift and go to state 40
    SUB             shift and go to state 41
    ADD             shift and go to state 42


state 13

    (15) command -> empty .
    SEMICOLON       reduce using rule 15 (command -> empty .)
    NEWLINE         reduce using rule 15 (command -> empty .)
    OPEN_CB         reduce using rule 15 (command -> empty .)
    DO              reduce using rule 15 (command -> empty .)
    THEN            reduce using rule 15 (command -> empty .)


state 14

    (60) inplace -> ID . IP_DIV expr
    (61) inplace -> ID . IP_MUL expr
    (62) inplace -> ID . IP_SUB expr
    (63) inplace -> ID . IP_ADD expr
    (58) somecrement -> ID . DECREMENT
    (59) somecrement -> ID . INCREMENT
    (64) assign -> ID . ASSIGN expr
    (42) expr -> ID .
    IP_DIV          shift and go to state 43
    IP_MUL          shift and go to state 44
    IP_SUB          shift and go to state 45
    IP_ADD          shift and go to state 46
    DECREMENT       shift and go to state 47
    INCREMENT       shift and go to state 48
    ASSIGN          shift and go to state 49
    COLON           reduce using rule 42 (expr -> ID .)
    NE              reduce using rule 42 (expr -> ID .)
    EQ              reduce using rule 42 (expr -> ID .)
    GE              reduce using rule 42 (expr -> ID .)
    LE              reduce using rule 42 (expr -> ID .)
    GT              reduce using rule 42 (expr -> ID .)
    LT              reduce using rule 42 (expr -> ID .)
    EXP             reduce using rule 42 (expr -> ID .)
    MOD             reduce using rule 42 (expr -> ID .)
    FLOORDIV        reduce using rule 42 (expr -> ID .)
    TRUEDIV         reduce using rule 42 (expr -> ID .)
    MUL             reduce using rule 42 (expr -> ID .)
    SUB             reduce using rule 42 (expr -> ID .)
    ADD             reduce using rule 42 (expr -> ID .)
    SEMICOLON       reduce using rule 42 (expr -> ID .)
    NEWLINE         reduce using rule 42 (expr -> ID .)
    OPEN_CB         reduce using rule 42 (expr -> ID .)
    DO              reduce using rule 42 (expr -> ID .)
    THEN            reduce using rule 42 (expr -> ID .)


state 15

    (33) count_block -> DO . NEWLINE statements expr TIMES
    (32) forever_block -> DO . statements FOREVER
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 50
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)

    statements                     shift and go to state 51
    expr                           shift and go to state 12
    statement                      shift and go to state 2
    command                        shift and go to state 3
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    empty                          shift and go to state 13

state 16

    (29) while_block -> WHILE . command OPEN_CB statements CLOSE_CB
    (30) while_block -> WHILE . command DO statements DONE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
  ! shift/reduce conflict for DO resolved as shift
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    OPEN_CB         reduce using rule 5 (empty -> .)

    command                        shift and go to state 52
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    expr                           shift and go to state 12
    empty                          shift and go to state 13

state 17

    (31) for_block -> FOR . ID IN command DO statements DONE
    ID              shift and go to state 53


state 18

    (18) if_block -> IF . error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> IF . error THEN NEWLINE statements elifs DONE
    (20) if_block -> IF . error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> IF . error THEN NEWLINE statements DONE
    (22) if_block -> IF . expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> IF . expr THEN NEWLINE statements elifs DONE
    (24) if_block -> IF . expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> IF . expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    error           shift and go to state 54
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 55

state 19

    (34) expr -> OPEN_SQ . list_items CLOSE_SQ
    (65) list_items -> . expr
    (66) list_items -> . list_items COMMA expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    list_items                     shift and go to state 57
    expr                           shift and go to state 58

state 20

    (35) expr -> STRING .
    COLON           reduce using rule 35 (expr -> STRING .)
    NE              reduce using rule 35 (expr -> STRING .)
    EQ              reduce using rule 35 (expr -> STRING .)
    GE              reduce using rule 35 (expr -> STRING .)
    LE              reduce using rule 35 (expr -> STRING .)
    GT              reduce using rule 35 (expr -> STRING .)
    LT              reduce using rule 35 (expr -> STRING .)
    EXP             reduce using rule 35 (expr -> STRING .)
    MOD             reduce using rule 35 (expr -> STRING .)
    FLOORDIV        reduce using rule 35 (expr -> STRING .)
    TRUEDIV         reduce using rule 35 (expr -> STRING .)
    MUL             reduce using rule 35 (expr -> STRING .)
    SUB             reduce using rule 35 (expr -> STRING .)
    ADD             reduce using rule 35 (expr -> STRING .)
    SEMICOLON       reduce using rule 35 (expr -> STRING .)
    NEWLINE         reduce using rule 35 (expr -> STRING .)
    OPEN_CB         reduce using rule 35 (expr -> STRING .)
    DO              reduce using rule 35 (expr -> STRING .)
    THEN            reduce using rule 35 (expr -> STRING .)
    CLOSE_SQ        reduce using rule 35 (expr -> STRING .)
    COMMA           reduce using rule 35 (expr -> STRING .)
    OPEN_SQ         reduce using rule 35 (expr -> STRING .)
    STRING          reduce using rule 35 (expr -> STRING .)
    FLOAT           reduce using rule 35 (expr -> STRING .)
    INTEGER         reduce using rule 35 (expr -> STRING .)
    ID              reduce using rule 35 (expr -> STRING .)
    NOT             reduce using rule 35 (expr -> STRING .)
    TIMES           reduce using rule 35 (expr -> STRING .)


state 21

    (36) expr -> FLOAT .
    COLON           reduce using rule 36 (expr -> FLOAT .)
    NE              reduce using rule 36 (expr -> FLOAT .)
    EQ              reduce using rule 36 (expr -> FLOAT .)
    GE              reduce using rule 36 (expr -> FLOAT .)
    LE              reduce using rule 36 (expr -> FLOAT .)
    GT              reduce using rule 36 (expr -> FLOAT .)
    LT              reduce using rule 36 (expr -> FLOAT .)
    EXP             reduce using rule 36 (expr -> FLOAT .)
    MOD             reduce using rule 36 (expr -> FLOAT .)
    FLOORDIV        reduce using rule 36 (expr -> FLOAT .)
    TRUEDIV         reduce using rule 36 (expr -> FLOAT .)
    MUL             reduce using rule 36 (expr -> FLOAT .)
    SUB             reduce using rule 36 (expr -> FLOAT .)
    ADD             reduce using rule 36 (expr -> FLOAT .)
    SEMICOLON       reduce using rule 36 (expr -> FLOAT .)
    NEWLINE         reduce using rule 36 (expr -> FLOAT .)
    OPEN_CB         reduce using rule 36 (expr -> FLOAT .)
    DO              reduce using rule 36 (expr -> FLOAT .)
    THEN            reduce using rule 36 (expr -> FLOAT .)
    CLOSE_SQ        reduce using rule 36 (expr -> FLOAT .)
    COMMA           reduce using rule 36 (expr -> FLOAT .)
    OPEN_SQ         reduce using rule 36 (expr -> FLOAT .)
    STRING          reduce using rule 36 (expr -> FLOAT .)
    FLOAT           reduce using rule 36 (expr -> FLOAT .)
    INTEGER         reduce using rule 36 (expr -> FLOAT .)
    ID              reduce using rule 36 (expr -> FLOAT .)
    NOT             reduce using rule 36 (expr -> FLOAT .)
    TIMES           reduce using rule 36 (expr -> FLOAT .)


state 22

    (37) expr -> INTEGER .
    COLON           reduce using rule 37 (expr -> INTEGER .)
    NE              reduce using rule 37 (expr -> INTEGER .)
    EQ              reduce using rule 37 (expr -> INTEGER .)
    GE              reduce using rule 37 (expr -> INTEGER .)
    LE              reduce using rule 37 (expr -> INTEGER .)
    GT              reduce using rule 37 (expr -> INTEGER .)
    LT              reduce using rule 37 (expr -> INTEGER .)
    EXP             reduce using rule 37 (expr -> INTEGER .)
    MOD             reduce using rule 37 (expr -> INTEGER .)
    FLOORDIV        reduce using rule 37 (expr -> INTEGER .)
    TRUEDIV         reduce using rule 37 (expr -> INTEGER .)
    MUL             reduce using rule 37 (expr -> INTEGER .)
    SUB             reduce using rule 37 (expr -> INTEGER .)
    ADD             reduce using rule 37 (expr -> INTEGER .)
    SEMICOLON       reduce using rule 37 (expr -> INTEGER .)
    NEWLINE         reduce using rule 37 (expr -> INTEGER .)
    OPEN_CB         reduce using rule 37 (expr -> INTEGER .)
    DO              reduce using rule 37 (expr -> INTEGER .)
    THEN            reduce using rule 37 (expr -> INTEGER .)
    CLOSE_SQ        reduce using rule 37 (expr -> INTEGER .)
    COMMA           reduce using rule 37 (expr -> INTEGER .)
    OPEN_SQ         reduce using rule 37 (expr -> INTEGER .)
    STRING          reduce using rule 37 (expr -> INTEGER .)
    FLOAT           reduce using rule 37 (expr -> INTEGER .)
    INTEGER         reduce using rule 37 (expr -> INTEGER .)
    ID              reduce using rule 37 (expr -> INTEGER .)
    NOT             reduce using rule 37 (expr -> INTEGER .)
    TIMES           reduce using rule 37 (expr -> INTEGER .)


state 23

    (38) expr -> COLON . ID SEMICOLON
    (39) expr -> COLON . ID args SEMICOLON
    ID              shift and go to state 59


state 24

    (43) expr -> NOT . expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 60

state 25

    (44) expr -> SUB . expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 61

state 26

    (2) statements -> statements statement .
    ID              reduce using rule 2 (statements -> statements statement .)
    DO              reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    FOR             reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    OPEN_SQ         reduce using rule 2 (statements -> statements statement .)
    STRING          reduce using rule 2 (statements -> statements statement .)
    FLOAT           reduce using rule 2 (statements -> statements statement .)
    INTEGER         reduce using rule 2 (statements -> statements statement .)
    COLON           reduce using rule 2 (statements -> statements statement .)
    NOT             reduce using rule 2 (statements -> statements statement .)
    SUB             reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    SEMICOLON       reduce using rule 2 (statements -> statements statement .)
    NEWLINE         reduce using rule 2 (statements -> statements statement .)
    FOREVER         reduce using rule 2 (statements -> statements statement .)
    CLOSE_CB        reduce using rule 2 (statements -> statements statement .)
    DONE            reduce using rule 2 (statements -> statements statement .)
    ELSE            reduce using rule 2 (statements -> statements statement .)


state 27

    (3) statement -> command SEMICOLON .
    ID              reduce using rule 3 (statement -> command SEMICOLON .)
    DO              reduce using rule 3 (statement -> command SEMICOLON .)
    WHILE           reduce using rule 3 (statement -> command SEMICOLON .)
    FOR             reduce using rule 3 (statement -> command SEMICOLON .)
    IF              reduce using rule 3 (statement -> command SEMICOLON .)
    OPEN_SQ         reduce using rule 3 (statement -> command SEMICOLON .)
    STRING          reduce using rule 3 (statement -> command SEMICOLON .)
    FLOAT           reduce using rule 3 (statement -> command SEMICOLON .)
    INTEGER         reduce using rule 3 (statement -> command SEMICOLON .)
    COLON           reduce using rule 3 (statement -> command SEMICOLON .)
    NOT             reduce using rule 3 (statement -> command SEMICOLON .)
    SUB             reduce using rule 3 (statement -> command SEMICOLON .)
    $end            reduce using rule 3 (statement -> command SEMICOLON .)
    SEMICOLON       reduce using rule 3 (statement -> command SEMICOLON .)
    NEWLINE         reduce using rule 3 (statement -> command SEMICOLON .)
    FOREVER         reduce using rule 3 (statement -> command SEMICOLON .)
    CLOSE_CB        reduce using rule 3 (statement -> command SEMICOLON .)
    DONE            reduce using rule 3 (statement -> command SEMICOLON .)
    ELSE            reduce using rule 3 (statement -> command SEMICOLON .)


state 28

    (4) statement -> command NEWLINE .
    ID              reduce using rule 4 (statement -> command NEWLINE .)
    DO              reduce using rule 4 (statement -> command NEWLINE .)
    WHILE           reduce using rule 4 (statement -> command NEWLINE .)
    FOR             reduce using rule 4 (statement -> command NEWLINE .)
    IF              reduce using rule 4 (statement -> command NEWLINE .)
    OPEN_SQ         reduce using rule 4 (statement -> command NEWLINE .)
    STRING          reduce using rule 4 (statement -> command NEWLINE .)
    FLOAT           reduce using rule 4 (statement -> command NEWLINE .)
    INTEGER         reduce using rule 4 (statement -> command NEWLINE .)
    COLON           reduce using rule 4 (statement -> command NEWLINE .)
    NOT             reduce using rule 4 (statement -> command NEWLINE .)
    SUB             reduce using rule 4 (statement -> command NEWLINE .)
    $end            reduce using rule 4 (statement -> command NEWLINE .)
    SEMICOLON       reduce using rule 4 (statement -> command NEWLINE .)
    NEWLINE         reduce using rule 4 (statement -> command NEWLINE .)
    FOREVER         reduce using rule 4 (statement -> command NEWLINE .)
    CLOSE_CB        reduce using rule 4 (statement -> command NEWLINE .)
    DONE            reduce using rule 4 (statement -> command NEWLINE .)
    ELSE            reduce using rule 4 (statement -> command NEWLINE .)


state 29

    (40) expr -> expr COLON . ID SEMICOLON
    (41) expr -> expr COLON . ID args SEMICOLON
    ID              shift and go to state 62


state 30

    (45) expr -> expr NE . expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 63

state 31

    (46) expr -> expr EQ . expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 64

state 32

    (47) expr -> expr GE . expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 65

state 33

    (48) expr -> expr LE . expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 66

state 34

    (49) expr -> expr GT . expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 67

state 35

    (50) expr -> expr LT . expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 68

state 36

    (51) expr -> expr EXP . expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 69

state 37

    (52) expr -> expr MOD . expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 70

state 38

    (53) expr -> expr FLOORDIV . expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 71

state 39

    (54) expr -> expr TRUEDIV . expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 72

state 40

    (55) expr -> expr MUL . expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 73

state 41

    (56) expr -> expr SUB . expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 74

state 42

    (57) expr -> expr ADD . expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 75

state 43

    (60) inplace -> ID IP_DIV . expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 76

state 44

    (61) inplace -> ID IP_MUL . expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 77

state 45

    (62) inplace -> ID IP_SUB . expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 78

state 46

    (63) inplace -> ID IP_ADD . expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 79

state 47

    (58) somecrement -> ID DECREMENT .
    SEMICOLON       reduce using rule 58 (somecrement -> ID DECREMENT .)
    NEWLINE         reduce using rule 58 (somecrement -> ID DECREMENT .)
    OPEN_CB         reduce using rule 58 (somecrement -> ID DECREMENT .)
    DO              reduce using rule 58 (somecrement -> ID DECREMENT .)
    THEN            reduce using rule 58 (somecrement -> ID DECREMENT .)


state 48

    (59) somecrement -> ID INCREMENT .
    SEMICOLON       reduce using rule 59 (somecrement -> ID INCREMENT .)
    NEWLINE         reduce using rule 59 (somecrement -> ID INCREMENT .)
    OPEN_CB         reduce using rule 59 (somecrement -> ID INCREMENT .)
    DO              reduce using rule 59 (somecrement -> ID INCREMENT .)
    THEN            reduce using rule 59 (somecrement -> ID INCREMENT .)


state 49

    (64) assign -> ID ASSIGN . expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 80

state 50

    (33) count_block -> DO NEWLINE . statements expr TIMES
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    statements                     shift and go to state 81
    expr                           shift and go to state 12
    statement                      shift and go to state 2
    command                        shift and go to state 3
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    empty                          shift and go to state 13

state 51

    (32) forever_block -> DO statements . FOREVER
    (2) statements -> statements . statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    FOREVER         shift and go to state 82
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    statement                      shift and go to state 26
    command                        shift and go to state 3
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    expr                           shift and go to state 12
    empty                          shift and go to state 13

state 52

    (29) while_block -> WHILE command . OPEN_CB statements CLOSE_CB
    (30) while_block -> WHILE command . DO statements DONE
    OPEN_CB         shift and go to state 83
    DO              shift and go to state 84


state 53

    (31) for_block -> FOR ID . IN command DO statements DONE
    IN              shift and go to state 85


state 54

    (18) if_block -> IF error . THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> IF error . THEN NEWLINE statements elifs DONE
    (20) if_block -> IF error . THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> IF error . THEN NEWLINE statements DONE
    THEN            shift and go to state 86


state 55

    (22) if_block -> IF expr . THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> IF expr . THEN NEWLINE statements elifs DONE
    (24) if_block -> IF expr . THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> IF expr . THEN NEWLINE statements DONE
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
    THEN            shift and go to state 87
    COLON           shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    FLOORDIV        shift and go to state 38
    TRUEDIV         shift and go to state 39
    MUL             shift and go to state 40
    SUB             shift and go to state 41
    ADD             shift and go to state 42


state 56

    (42) expr -> ID .
    THEN            reduce using rule 42 (expr -> ID .)
    COLON           reduce using rule 42 (expr -> ID .)
    NE              reduce using rule 42 (expr -> ID .)
    EQ              reduce using rule 42 (expr -> ID .)
    GE              reduce using rule 42 (expr -> ID .)
    LE              reduce using rule 42 (expr -> ID .)
    GT              reduce using rule 42 (expr -> ID .)
    LT              reduce using rule 42 (expr -> ID .)
    EXP             reduce using rule 42 (expr -> ID .)
    MOD             reduce using rule 42 (expr -> ID .)
    FLOORDIV        reduce using rule 42 (expr -> ID .)
    TRUEDIV         reduce using rule 42 (expr -> ID .)
    MUL             reduce using rule 42 (expr -> ID .)
    SUB             reduce using rule 42 (expr -> ID .)
    ADD             reduce using rule 42 (expr -> ID .)
    CLOSE_SQ        reduce using rule 42 (expr -> ID .)
    COMMA           reduce using rule 42 (expr -> ID .)
    SEMICOLON       reduce using rule 42 (expr -> ID .)
    NEWLINE         reduce using rule 42 (expr -> ID .)
    OPEN_CB         reduce using rule 42 (expr -> ID .)
    DO              reduce using rule 42 (expr -> ID .)
    OPEN_SQ         reduce using rule 42 (expr -> ID .)
    STRING          reduce using rule 42 (expr -> ID .)
    FLOAT           reduce using rule 42 (expr -> ID .)
    INTEGER         reduce using rule 42 (expr -> ID .)
    ID              reduce using rule 42 (expr -> ID .)
    NOT             reduce using rule 42 (expr -> ID .)
    TIMES           reduce using rule 42 (expr -> ID .)


state 57

    (34) expr -> OPEN_SQ list_items . CLOSE_SQ
    (66) list_items -> list_items . COMMA expr
    CLOSE_SQ        shift and go to state 88
    COMMA           shift and go to state 89


state 58

    (65) list_items -> expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
    CLOSE_SQ        reduce using rule 65 (list_items -> expr .)
    COMMA           reduce using rule 65 (list_items -> expr .)
    COLON           shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    FLOORDIV        shift and go to state 38
    TRUEDIV         shift and go to state 39
    MUL             shift and go to state 40
    SUB             shift and go to state 41
    ADD             shift and go to state 42


state 59

    (38) expr -> COLON ID . SEMICOLON
    (39) expr -> COLON ID . args SEMICOLON
    (16) args -> . expr
    (17) args -> . args expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    SEMICOLON       shift and go to state 90
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    args                           shift and go to state 91
    expr                           shift and go to state 92

state 60

    (43) expr -> NOT expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for FLOORDIV resolved as shift
  ! shift/reduce conflict for TRUEDIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
    SEMICOLON       reduce using rule 43 (expr -> NOT expr .)
    NEWLINE         reduce using rule 43 (expr -> NOT expr .)
    OPEN_CB         reduce using rule 43 (expr -> NOT expr .)
    DO              reduce using rule 43 (expr -> NOT expr .)
    THEN            reduce using rule 43 (expr -> NOT expr .)
    CLOSE_SQ        reduce using rule 43 (expr -> NOT expr .)
    COMMA           reduce using rule 43 (expr -> NOT expr .)
    OPEN_SQ         reduce using rule 43 (expr -> NOT expr .)
    STRING          reduce using rule 43 (expr -> NOT expr .)
    FLOAT           reduce using rule 43 (expr -> NOT expr .)
    INTEGER         reduce using rule 43 (expr -> NOT expr .)
    ID              reduce using rule 43 (expr -> NOT expr .)
    NOT             reduce using rule 43 (expr -> NOT expr .)
    TIMES           reduce using rule 43 (expr -> NOT expr .)
    COLON           shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    FLOORDIV        shift and go to state 38
    TRUEDIV         shift and go to state 39
    MUL             shift and go to state 40
    SUB             shift and go to state 41
    ADD             shift and go to state 42


state 61

    (44) expr -> SUB expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
    COLON           reduce using rule 44 (expr -> SUB expr .)
    NE              reduce using rule 44 (expr -> SUB expr .)
    EQ              reduce using rule 44 (expr -> SUB expr .)
    GE              reduce using rule 44 (expr -> SUB expr .)
    LE              reduce using rule 44 (expr -> SUB expr .)
    GT              reduce using rule 44 (expr -> SUB expr .)
    LT              reduce using rule 44 (expr -> SUB expr .)
    EXP             reduce using rule 44 (expr -> SUB expr .)
    MOD             reduce using rule 44 (expr -> SUB expr .)
    FLOORDIV        reduce using rule 44 (expr -> SUB expr .)
    TRUEDIV         reduce using rule 44 (expr -> SUB expr .)
    MUL             reduce using rule 44 (expr -> SUB expr .)
    SUB             reduce using rule 44 (expr -> SUB expr .)
    ADD             reduce using rule 44 (expr -> SUB expr .)
    SEMICOLON       reduce using rule 44 (expr -> SUB expr .)
    NEWLINE         reduce using rule 44 (expr -> SUB expr .)
    OPEN_CB         reduce using rule 44 (expr -> SUB expr .)
    DO              reduce using rule 44 (expr -> SUB expr .)
    THEN            reduce using rule 44 (expr -> SUB expr .)
    CLOSE_SQ        reduce using rule 44 (expr -> SUB expr .)
    COMMA           reduce using rule 44 (expr -> SUB expr .)
    OPEN_SQ         reduce using rule 44 (expr -> SUB expr .)
    STRING          reduce using rule 44 (expr -> SUB expr .)
    FLOAT           reduce using rule 44 (expr -> SUB expr .)
    INTEGER         reduce using rule 44 (expr -> SUB expr .)
    ID              reduce using rule 44 (expr -> SUB expr .)
    NOT             reduce using rule 44 (expr -> SUB expr .)
    TIMES           reduce using rule 44 (expr -> SUB expr .)


state 62

    (40) expr -> expr COLON ID . SEMICOLON
    (41) expr -> expr COLON ID . args SEMICOLON
    (16) args -> . expr
    (17) args -> . args expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    SEMICOLON       shift and go to state 93
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 92
    args                           shift and go to state 94

state 63

    (45) expr -> expr NE expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
    COLON           reduce using rule 45 (expr -> expr NE expr .)
    NE              reduce using rule 45 (expr -> expr NE expr .)
    EQ              reduce using rule 45 (expr -> expr NE expr .)
    GE              reduce using rule 45 (expr -> expr NE expr .)
    LE              reduce using rule 45 (expr -> expr NE expr .)
    GT              reduce using rule 45 (expr -> expr NE expr .)
    LT              reduce using rule 45 (expr -> expr NE expr .)
    EXP             reduce using rule 45 (expr -> expr NE expr .)
    SEMICOLON       reduce using rule 45 (expr -> expr NE expr .)
    NEWLINE         reduce using rule 45 (expr -> expr NE expr .)
    OPEN_CB         reduce using rule 45 (expr -> expr NE expr .)
    DO              reduce using rule 45 (expr -> expr NE expr .)
    THEN            reduce using rule 45 (expr -> expr NE expr .)
    CLOSE_SQ        reduce using rule 45 (expr -> expr NE expr .)
    COMMA           reduce using rule 45 (expr -> expr NE expr .)
    OPEN_SQ         reduce using rule 45 (expr -> expr NE expr .)
    STRING          reduce using rule 45 (expr -> expr NE expr .)
    FLOAT           reduce using rule 45 (expr -> expr NE expr .)
    INTEGER         reduce using rule 45 (expr -> expr NE expr .)
    ID              reduce using rule 45 (expr -> expr NE expr .)
    NOT             reduce using rule 45 (expr -> expr NE expr .)
    TIMES           reduce using rule 45 (expr -> expr NE expr .)
    MOD             shift and go to state 37
    FLOORDIV        shift and go to state 38
    TRUEDIV         shift and go to state 39
    MUL             shift and go to state 40
    SUB             shift and go to state 41
    ADD             shift and go to state 42


state 64

    (46) expr -> expr EQ expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
    COLON           reduce using rule 46 (expr -> expr EQ expr .)
    NE              reduce using rule 46 (expr -> expr EQ expr .)
    EQ              reduce using rule 46 (expr -> expr EQ expr .)
    GE              reduce using rule 46 (expr -> expr EQ expr .)
    LE              reduce using rule 46 (expr -> expr EQ expr .)
    GT              reduce using rule 46 (expr -> expr EQ expr .)
    LT              reduce using rule 46 (expr -> expr EQ expr .)
    EXP             reduce using rule 46 (expr -> expr EQ expr .)
    SEMICOLON       reduce using rule 46 (expr -> expr EQ expr .)
    NEWLINE         reduce using rule 46 (expr -> expr EQ expr .)
    OPEN_CB         reduce using rule 46 (expr -> expr EQ expr .)
    DO              reduce using rule 46 (expr -> expr EQ expr .)
    THEN            reduce using rule 46 (expr -> expr EQ expr .)
    CLOSE_SQ        reduce using rule 46 (expr -> expr EQ expr .)
    COMMA           reduce using rule 46 (expr -> expr EQ expr .)
    OPEN_SQ         reduce using rule 46 (expr -> expr EQ expr .)
    STRING          reduce using rule 46 (expr -> expr EQ expr .)
    FLOAT           reduce using rule 46 (expr -> expr EQ expr .)
    INTEGER         reduce using rule 46 (expr -> expr EQ expr .)
    ID              reduce using rule 46 (expr -> expr EQ expr .)
    NOT             reduce using rule 46 (expr -> expr EQ expr .)
    TIMES           reduce using rule 46 (expr -> expr EQ expr .)
    MOD             shift and go to state 37
    FLOORDIV        shift and go to state 38
    TRUEDIV         shift and go to state 39
    MUL             shift and go to state 40
    SUB             shift and go to state 41
    ADD             shift and go to state 42


state 65

    (47) expr -> expr GE expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
    COLON           reduce using rule 47 (expr -> expr GE expr .)
    NE              reduce using rule 47 (expr -> expr GE expr .)
    EQ              reduce using rule 47 (expr -> expr GE expr .)
    GE              reduce using rule 47 (expr -> expr GE expr .)
    LE              reduce using rule 47 (expr -> expr GE expr .)
    GT              reduce using rule 47 (expr -> expr GE expr .)
    LT              reduce using rule 47 (expr -> expr GE expr .)
    EXP             reduce using rule 47 (expr -> expr GE expr .)
    SEMICOLON       reduce using rule 47 (expr -> expr GE expr .)
    NEWLINE         reduce using rule 47 (expr -> expr GE expr .)
    OPEN_CB         reduce using rule 47 (expr -> expr GE expr .)
    DO              reduce using rule 47 (expr -> expr GE expr .)
    THEN            reduce using rule 47 (expr -> expr GE expr .)
    CLOSE_SQ        reduce using rule 47 (expr -> expr GE expr .)
    COMMA           reduce using rule 47 (expr -> expr GE expr .)
    OPEN_SQ         reduce using rule 47 (expr -> expr GE expr .)
    STRING          reduce using rule 47 (expr -> expr GE expr .)
    FLOAT           reduce using rule 47 (expr -> expr GE expr .)
    INTEGER         reduce using rule 47 (expr -> expr GE expr .)
    ID              reduce using rule 47 (expr -> expr GE expr .)
    NOT             reduce using rule 47 (expr -> expr GE expr .)
    TIMES           reduce using rule 47 (expr -> expr GE expr .)
    MOD             shift and go to state 37
    FLOORDIV        shift and go to state 38
    TRUEDIV         shift and go to state 39
    MUL             shift and go to state 40
    SUB             shift and go to state 41
    ADD             shift and go to state 42


state 66

    (48) expr -> expr LE expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
    COLON           reduce using rule 48 (expr -> expr LE expr .)
    NE              reduce using rule 48 (expr -> expr LE expr .)
    EQ              reduce using rule 48 (expr -> expr LE expr .)
    GE              reduce using rule 48 (expr -> expr LE expr .)
    LE              reduce using rule 48 (expr -> expr LE expr .)
    GT              reduce using rule 48 (expr -> expr LE expr .)
    LT              reduce using rule 48 (expr -> expr LE expr .)
    EXP             reduce using rule 48 (expr -> expr LE expr .)
    SEMICOLON       reduce using rule 48 (expr -> expr LE expr .)
    NEWLINE         reduce using rule 48 (expr -> expr LE expr .)
    OPEN_CB         reduce using rule 48 (expr -> expr LE expr .)
    DO              reduce using rule 48 (expr -> expr LE expr .)
    THEN            reduce using rule 48 (expr -> expr LE expr .)
    CLOSE_SQ        reduce using rule 48 (expr -> expr LE expr .)
    COMMA           reduce using rule 48 (expr -> expr LE expr .)
    OPEN_SQ         reduce using rule 48 (expr -> expr LE expr .)
    STRING          reduce using rule 48 (expr -> expr LE expr .)
    FLOAT           reduce using rule 48 (expr -> expr LE expr .)
    INTEGER         reduce using rule 48 (expr -> expr LE expr .)
    ID              reduce using rule 48 (expr -> expr LE expr .)
    NOT             reduce using rule 48 (expr -> expr LE expr .)
    TIMES           reduce using rule 48 (expr -> expr LE expr .)
    MOD             shift and go to state 37
    FLOORDIV        shift and go to state 38
    TRUEDIV         shift and go to state 39
    MUL             shift and go to state 40
    SUB             shift and go to state 41
    ADD             shift and go to state 42


state 67

    (49) expr -> expr GT expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
    COLON           reduce using rule 49 (expr -> expr GT expr .)
    NE              reduce using rule 49 (expr -> expr GT expr .)
    EQ              reduce using rule 49 (expr -> expr GT expr .)
    GE              reduce using rule 49 (expr -> expr GT expr .)
    LE              reduce using rule 49 (expr -> expr GT expr .)
    GT              reduce using rule 49 (expr -> expr GT expr .)
    LT              reduce using rule 49 (expr -> expr GT expr .)
    EXP             reduce using rule 49 (expr -> expr GT expr .)
    SEMICOLON       reduce using rule 49 (expr -> expr GT expr .)
    NEWLINE         reduce using rule 49 (expr -> expr GT expr .)
    OPEN_CB         reduce using rule 49 (expr -> expr GT expr .)
    DO              reduce using rule 49 (expr -> expr GT expr .)
    THEN            reduce using rule 49 (expr -> expr GT expr .)
    CLOSE_SQ        reduce using rule 49 (expr -> expr GT expr .)
    COMMA           reduce using rule 49 (expr -> expr GT expr .)
    OPEN_SQ         reduce using rule 49 (expr -> expr GT expr .)
    STRING          reduce using rule 49 (expr -> expr GT expr .)
    FLOAT           reduce using rule 49 (expr -> expr GT expr .)
    INTEGER         reduce using rule 49 (expr -> expr GT expr .)
    ID              reduce using rule 49 (expr -> expr GT expr .)
    NOT             reduce using rule 49 (expr -> expr GT expr .)
    TIMES           reduce using rule 49 (expr -> expr GT expr .)
    MOD             shift and go to state 37
    FLOORDIV        shift and go to state 38
    TRUEDIV         shift and go to state 39
    MUL             shift and go to state 40
    SUB             shift and go to state 41
    ADD             shift and go to state 42


state 68

    (50) expr -> expr LT expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
    COLON           reduce using rule 50 (expr -> expr LT expr .)
    NE              reduce using rule 50 (expr -> expr LT expr .)
    EQ              reduce using rule 50 (expr -> expr LT expr .)
    GE              reduce using rule 50 (expr -> expr LT expr .)
    LE              reduce using rule 50 (expr -> expr LT expr .)
    GT              reduce using rule 50 (expr -> expr LT expr .)
    LT              reduce using rule 50 (expr -> expr LT expr .)
    EXP             reduce using rule 50 (expr -> expr LT expr .)
    SEMICOLON       reduce using rule 50 (expr -> expr LT expr .)
    NEWLINE         reduce using rule 50 (expr -> expr LT expr .)
    OPEN_CB         reduce using rule 50 (expr -> expr LT expr .)
    DO              reduce using rule 50 (expr -> expr LT expr .)
    THEN            reduce using rule 50 (expr -> expr LT expr .)
    CLOSE_SQ        reduce using rule 50 (expr -> expr LT expr .)
    COMMA           reduce using rule 50 (expr -> expr LT expr .)
    OPEN_SQ         reduce using rule 50 (expr -> expr LT expr .)
    STRING          reduce using rule 50 (expr -> expr LT expr .)
    FLOAT           reduce using rule 50 (expr -> expr LT expr .)
    INTEGER         reduce using rule 50 (expr -> expr LT expr .)
    ID              reduce using rule 50 (expr -> expr LT expr .)
    NOT             reduce using rule 50 (expr -> expr LT expr .)
    TIMES           reduce using rule 50 (expr -> expr LT expr .)
    MOD             shift and go to state 37
    FLOORDIV        shift and go to state 38
    TRUEDIV         shift and go to state 39
    MUL             shift and go to state 40
    SUB             shift and go to state 41
    ADD             shift and go to state 42


state 69

    (51) expr -> expr EXP expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for FLOORDIV resolved as shift
  ! shift/reduce conflict for TRUEDIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
    SEMICOLON       reduce using rule 51 (expr -> expr EXP expr .)
    NEWLINE         reduce using rule 51 (expr -> expr EXP expr .)
    OPEN_CB         reduce using rule 51 (expr -> expr EXP expr .)
    DO              reduce using rule 51 (expr -> expr EXP expr .)
    THEN            reduce using rule 51 (expr -> expr EXP expr .)
    CLOSE_SQ        reduce using rule 51 (expr -> expr EXP expr .)
    COMMA           reduce using rule 51 (expr -> expr EXP expr .)
    OPEN_SQ         reduce using rule 51 (expr -> expr EXP expr .)
    STRING          reduce using rule 51 (expr -> expr EXP expr .)
    FLOAT           reduce using rule 51 (expr -> expr EXP expr .)
    INTEGER         reduce using rule 51 (expr -> expr EXP expr .)
    ID              reduce using rule 51 (expr -> expr EXP expr .)
    NOT             reduce using rule 51 (expr -> expr EXP expr .)
    TIMES           reduce using rule 51 (expr -> expr EXP expr .)
    COLON           shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    FLOORDIV        shift and go to state 38
    TRUEDIV         shift and go to state 39
    MUL             shift and go to state 40
    SUB             shift and go to state 41
    ADD             shift and go to state 42


state 70

    (52) expr -> expr MOD expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
    COLON           reduce using rule 52 (expr -> expr MOD expr .)
    NE              reduce using rule 52 (expr -> expr MOD expr .)
    EQ              reduce using rule 52 (expr -> expr MOD expr .)
    GE              reduce using rule 52 (expr -> expr MOD expr .)
    LE              reduce using rule 52 (expr -> expr MOD expr .)
    GT              reduce using rule 52 (expr -> expr MOD expr .)
    LT              reduce using rule 52 (expr -> expr MOD expr .)
    EXP             reduce using rule 52 (expr -> expr MOD expr .)
    MOD             reduce using rule 52 (expr -> expr MOD expr .)
    FLOORDIV        reduce using rule 52 (expr -> expr MOD expr .)
    TRUEDIV         reduce using rule 52 (expr -> expr MOD expr .)
    MUL             reduce using rule 52 (expr -> expr MOD expr .)
    SUB             reduce using rule 52 (expr -> expr MOD expr .)
    ADD             reduce using rule 52 (expr -> expr MOD expr .)
    SEMICOLON       reduce using rule 52 (expr -> expr MOD expr .)
    NEWLINE         reduce using rule 52 (expr -> expr MOD expr .)
    OPEN_CB         reduce using rule 52 (expr -> expr MOD expr .)
    DO              reduce using rule 52 (expr -> expr MOD expr .)
    THEN            reduce using rule 52 (expr -> expr MOD expr .)
    CLOSE_SQ        reduce using rule 52 (expr -> expr MOD expr .)
    COMMA           reduce using rule 52 (expr -> expr MOD expr .)
    OPEN_SQ         reduce using rule 52 (expr -> expr MOD expr .)
    STRING          reduce using rule 52 (expr -> expr MOD expr .)
    FLOAT           reduce using rule 52 (expr -> expr MOD expr .)
    INTEGER         reduce using rule 52 (expr -> expr MOD expr .)
    ID              reduce using rule 52 (expr -> expr MOD expr .)
    NOT             reduce using rule 52 (expr -> expr MOD expr .)
    TIMES           reduce using rule 52 (expr -> expr MOD expr .)


state 71

    (53) expr -> expr FLOORDIV expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
    COLON           reduce using rule 53 (expr -> expr FLOORDIV expr .)
    NE              reduce using rule 53 (expr -> expr FLOORDIV expr .)
    EQ              reduce using rule 53 (expr -> expr FLOORDIV expr .)
    GE              reduce using rule 53 (expr -> expr FLOORDIV expr .)
    LE              reduce using rule 53 (expr -> expr FLOORDIV expr .)
    GT              reduce using rule 53 (expr -> expr FLOORDIV expr .)
    LT              reduce using rule 53 (expr -> expr FLOORDIV expr .)
    EXP             reduce using rule 53 (expr -> expr FLOORDIV expr .)
    MOD             reduce using rule 53 (expr -> expr FLOORDIV expr .)
    FLOORDIV        reduce using rule 53 (expr -> expr FLOORDIV expr .)
    TRUEDIV         reduce using rule 53 (expr -> expr FLOORDIV expr .)
    MUL             reduce using rule 53 (expr -> expr FLOORDIV expr .)
    SUB             reduce using rule 53 (expr -> expr FLOORDIV expr .)
    ADD             reduce using rule 53 (expr -> expr FLOORDIV expr .)
    SEMICOLON       reduce using rule 53 (expr -> expr FLOORDIV expr .)
    NEWLINE         reduce using rule 53 (expr -> expr FLOORDIV expr .)
    OPEN_CB         reduce using rule 53 (expr -> expr FLOORDIV expr .)
    DO              reduce using rule 53 (expr -> expr FLOORDIV expr .)
    THEN            reduce using rule 53 (expr -> expr FLOORDIV expr .)
    CLOSE_SQ        reduce using rule 53 (expr -> expr FLOORDIV expr .)
    COMMA           reduce using rule 53 (expr -> expr FLOORDIV expr .)
    OPEN_SQ         reduce using rule 53 (expr -> expr FLOORDIV expr .)
    STRING          reduce using rule 53 (expr -> expr FLOORDIV expr .)
    FLOAT           reduce using rule 53 (expr -> expr FLOORDIV expr .)
    INTEGER         reduce using rule 53 (expr -> expr FLOORDIV expr .)
    ID              reduce using rule 53 (expr -> expr FLOORDIV expr .)
    NOT             reduce using rule 53 (expr -> expr FLOORDIV expr .)
    TIMES           reduce using rule 53 (expr -> expr FLOORDIV expr .)


state 72

    (54) expr -> expr TRUEDIV expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
    COLON           reduce using rule 54 (expr -> expr TRUEDIV expr .)
    NE              reduce using rule 54 (expr -> expr TRUEDIV expr .)
    EQ              reduce using rule 54 (expr -> expr TRUEDIV expr .)
    GE              reduce using rule 54 (expr -> expr TRUEDIV expr .)
    LE              reduce using rule 54 (expr -> expr TRUEDIV expr .)
    GT              reduce using rule 54 (expr -> expr TRUEDIV expr .)
    LT              reduce using rule 54 (expr -> expr TRUEDIV expr .)
    EXP             reduce using rule 54 (expr -> expr TRUEDIV expr .)
    MOD             reduce using rule 54 (expr -> expr TRUEDIV expr .)
    FLOORDIV        reduce using rule 54 (expr -> expr TRUEDIV expr .)
    TRUEDIV         reduce using rule 54 (expr -> expr TRUEDIV expr .)
    MUL             reduce using rule 54 (expr -> expr TRUEDIV expr .)
    SUB             reduce using rule 54 (expr -> expr TRUEDIV expr .)
    ADD             reduce using rule 54 (expr -> expr TRUEDIV expr .)
    SEMICOLON       reduce using rule 54 (expr -> expr TRUEDIV expr .)
    NEWLINE         reduce using rule 54 (expr -> expr TRUEDIV expr .)
    OPEN_CB         reduce using rule 54 (expr -> expr TRUEDIV expr .)
    DO              reduce using rule 54 (expr -> expr TRUEDIV expr .)
    THEN            reduce using rule 54 (expr -> expr TRUEDIV expr .)
    CLOSE_SQ        reduce using rule 54 (expr -> expr TRUEDIV expr .)
    COMMA           reduce using rule 54 (expr -> expr TRUEDIV expr .)
    OPEN_SQ         reduce using rule 54 (expr -> expr TRUEDIV expr .)
    STRING          reduce using rule 54 (expr -> expr TRUEDIV expr .)
    FLOAT           reduce using rule 54 (expr -> expr TRUEDIV expr .)
    INTEGER         reduce using rule 54 (expr -> expr TRUEDIV expr .)
    ID              reduce using rule 54 (expr -> expr TRUEDIV expr .)
    NOT             reduce using rule 54 (expr -> expr TRUEDIV expr .)
    TIMES           reduce using rule 54 (expr -> expr TRUEDIV expr .)


state 73

    (55) expr -> expr MUL expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
    COLON           reduce using rule 55 (expr -> expr MUL expr .)
    NE              reduce using rule 55 (expr -> expr MUL expr .)
    EQ              reduce using rule 55 (expr -> expr MUL expr .)
    GE              reduce using rule 55 (expr -> expr MUL expr .)
    LE              reduce using rule 55 (expr -> expr MUL expr .)
    GT              reduce using rule 55 (expr -> expr MUL expr .)
    LT              reduce using rule 55 (expr -> expr MUL expr .)
    EXP             reduce using rule 55 (expr -> expr MUL expr .)
    MOD             reduce using rule 55 (expr -> expr MUL expr .)
    FLOORDIV        reduce using rule 55 (expr -> expr MUL expr .)
    TRUEDIV         reduce using rule 55 (expr -> expr MUL expr .)
    MUL             reduce using rule 55 (expr -> expr MUL expr .)
    SUB             reduce using rule 55 (expr -> expr MUL expr .)
    ADD             reduce using rule 55 (expr -> expr MUL expr .)
    SEMICOLON       reduce using rule 55 (expr -> expr MUL expr .)
    NEWLINE         reduce using rule 55 (expr -> expr MUL expr .)
    OPEN_CB         reduce using rule 55 (expr -> expr MUL expr .)
    DO              reduce using rule 55 (expr -> expr MUL expr .)
    THEN            reduce using rule 55 (expr -> expr MUL expr .)
    CLOSE_SQ        reduce using rule 55 (expr -> expr MUL expr .)
    COMMA           reduce using rule 55 (expr -> expr MUL expr .)
    OPEN_SQ         reduce using rule 55 (expr -> expr MUL expr .)
    STRING          reduce using rule 55 (expr -> expr MUL expr .)
    FLOAT           reduce using rule 55 (expr -> expr MUL expr .)
    INTEGER         reduce using rule 55 (expr -> expr MUL expr .)
    ID              reduce using rule 55 (expr -> expr MUL expr .)
    NOT             reduce using rule 55 (expr -> expr MUL expr .)
    TIMES           reduce using rule 55 (expr -> expr MUL expr .)


state 74

    (56) expr -> expr SUB expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
    COLON           reduce using rule 56 (expr -> expr SUB expr .)
    NE              reduce using rule 56 (expr -> expr SUB expr .)
    EQ              reduce using rule 56 (expr -> expr SUB expr .)
    GE              reduce using rule 56 (expr -> expr SUB expr .)
    LE              reduce using rule 56 (expr -> expr SUB expr .)
    GT              reduce using rule 56 (expr -> expr SUB expr .)
    LT              reduce using rule 56 (expr -> expr SUB expr .)
    EXP             reduce using rule 56 (expr -> expr SUB expr .)
    SUB             reduce using rule 56 (expr -> expr SUB expr .)
    ADD             reduce using rule 56 (expr -> expr SUB expr .)
    SEMICOLON       reduce using rule 56 (expr -> expr SUB expr .)
    NEWLINE         reduce using rule 56 (expr -> expr SUB expr .)
    OPEN_CB         reduce using rule 56 (expr -> expr SUB expr .)
    DO              reduce using rule 56 (expr -> expr SUB expr .)
    THEN            reduce using rule 56 (expr -> expr SUB expr .)
    CLOSE_SQ        reduce using rule 56 (expr -> expr SUB expr .)
    COMMA           reduce using rule 56 (expr -> expr SUB expr .)
    OPEN_SQ         reduce using rule 56 (expr -> expr SUB expr .)
    STRING          reduce using rule 56 (expr -> expr SUB expr .)
    FLOAT           reduce using rule 56 (expr -> expr SUB expr .)
    INTEGER         reduce using rule 56 (expr -> expr SUB expr .)
    ID              reduce using rule 56 (expr -> expr SUB expr .)
    NOT             reduce using rule 56 (expr -> expr SUB expr .)
    TIMES           reduce using rule 56 (expr -> expr SUB expr .)
    MOD             shift and go to state 37
    FLOORDIV        shift and go to state 38
    TRUEDIV         shift and go to state 39
    MUL             shift and go to state 40


state 75

    (57) expr -> expr ADD expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
    COLON           reduce using rule 57 (expr -> expr ADD expr .)
    NE              reduce using rule 57 (expr -> expr ADD expr .)
    EQ              reduce using rule 57 (expr -> expr ADD expr .)
    GE              reduce using rule 57 (expr -> expr ADD expr .)
    LE              reduce using rule 57 (expr -> expr ADD expr .)
    GT              reduce using rule 57 (expr -> expr ADD expr .)
    LT              reduce using rule 57 (expr -> expr ADD expr .)
    EXP             reduce using rule 57 (expr -> expr ADD expr .)
    SUB             reduce using rule 57 (expr -> expr ADD expr .)
    ADD             reduce using rule 57 (expr -> expr ADD expr .)
    SEMICOLON       reduce using rule 57 (expr -> expr ADD expr .)
    NEWLINE         reduce using rule 57 (expr -> expr ADD expr .)
    OPEN_CB         reduce using rule 57 (expr -> expr ADD expr .)
    DO              reduce using rule 57 (expr -> expr ADD expr .)
    THEN            reduce using rule 57 (expr -> expr ADD expr .)
    CLOSE_SQ        reduce using rule 57 (expr -> expr ADD expr .)
    COMMA           reduce using rule 57 (expr -> expr ADD expr .)
    OPEN_SQ         reduce using rule 57 (expr -> expr ADD expr .)
    STRING          reduce using rule 57 (expr -> expr ADD expr .)
    FLOAT           reduce using rule 57 (expr -> expr ADD expr .)
    INTEGER         reduce using rule 57 (expr -> expr ADD expr .)
    ID              reduce using rule 57 (expr -> expr ADD expr .)
    NOT             reduce using rule 57 (expr -> expr ADD expr .)
    TIMES           reduce using rule 57 (expr -> expr ADD expr .)
    MOD             shift and go to state 37
    FLOORDIV        shift and go to state 38
    TRUEDIV         shift and go to state 39
    MUL             shift and go to state 40


state 76

    (60) inplace -> ID IP_DIV expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
    SEMICOLON       reduce using rule 60 (inplace -> ID IP_DIV expr .)
    NEWLINE         reduce using rule 60 (inplace -> ID IP_DIV expr .)
    OPEN_CB         reduce using rule 60 (inplace -> ID IP_DIV expr .)
    DO              reduce using rule 60 (inplace -> ID IP_DIV expr .)
    THEN            reduce using rule 60 (inplace -> ID IP_DIV expr .)
    COLON           shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    FLOORDIV        shift and go to state 38
    TRUEDIV         shift and go to state 39
    MUL             shift and go to state 40
    SUB             shift and go to state 41
    ADD             shift and go to state 42


state 77

    (61) inplace -> ID IP_MUL expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
    SEMICOLON       reduce using rule 61 (inplace -> ID IP_MUL expr .)
    NEWLINE         reduce using rule 61 (inplace -> ID IP_MUL expr .)
    OPEN_CB         reduce using rule 61 (inplace -> ID IP_MUL expr .)
    DO              reduce using rule 61 (inplace -> ID IP_MUL expr .)
    THEN            reduce using rule 61 (inplace -> ID IP_MUL expr .)
    COLON           shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    FLOORDIV        shift and go to state 38
    TRUEDIV         shift and go to state 39
    MUL             shift and go to state 40
    SUB             shift and go to state 41
    ADD             shift and go to state 42


state 78

    (62) inplace -> ID IP_SUB expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
    SEMICOLON       reduce using rule 62 (inplace -> ID IP_SUB expr .)
    NEWLINE         reduce using rule 62 (inplace -> ID IP_SUB expr .)
    OPEN_CB         reduce using rule 62 (inplace -> ID IP_SUB expr .)
    DO              reduce using rule 62 (inplace -> ID IP_SUB expr .)
    THEN            reduce using rule 62 (inplace -> ID IP_SUB expr .)
    COLON           shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    FLOORDIV        shift and go to state 38
    TRUEDIV         shift and go to state 39
    MUL             shift and go to state 40
    SUB             shift and go to state 41
    ADD             shift and go to state 42


state 79

    (63) inplace -> ID IP_ADD expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
    SEMICOLON       reduce using rule 63 (inplace -> ID IP_ADD expr .)
    NEWLINE         reduce using rule 63 (inplace -> ID IP_ADD expr .)
    OPEN_CB         reduce using rule 63 (inplace -> ID IP_ADD expr .)
    DO              reduce using rule 63 (inplace -> ID IP_ADD expr .)
    THEN            reduce using rule 63 (inplace -> ID IP_ADD expr .)
    COLON           shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    FLOORDIV        shift and go to state 38
    TRUEDIV         shift and go to state 39
    MUL             shift and go to state 40
    SUB             shift and go to state 41
    ADD             shift and go to state 42


state 80

    (64) assign -> ID ASSIGN expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
    SEMICOLON       reduce using rule 64 (assign -> ID ASSIGN expr .)
    NEWLINE         reduce using rule 64 (assign -> ID ASSIGN expr .)
    OPEN_CB         reduce using rule 64 (assign -> ID ASSIGN expr .)
    DO              reduce using rule 64 (assign -> ID ASSIGN expr .)
    THEN            reduce using rule 64 (assign -> ID ASSIGN expr .)
    COLON           shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    FLOORDIV        shift and go to state 38
    TRUEDIV         shift and go to state 39
    MUL             shift and go to state 40
    SUB             shift and go to state 41
    ADD             shift and go to state 42


state 81

    (33) count_block -> DO NEWLINE statements . expr TIMES
    (2) statements -> statements . statement
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (5) empty -> .
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 96
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    expr                           shift and go to state 95
    statement                      shift and go to state 26
    command                        shift and go to state 3
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    empty                          shift and go to state 13

state 82

    (32) forever_block -> DO statements FOREVER .
    SEMICOLON       reduce using rule 32 (forever_block -> DO statements FOREVER .)
    NEWLINE         reduce using rule 32 (forever_block -> DO statements FOREVER .)
    OPEN_CB         reduce using rule 32 (forever_block -> DO statements FOREVER .)
    DO              reduce using rule 32 (forever_block -> DO statements FOREVER .)
    THEN            reduce using rule 32 (forever_block -> DO statements FOREVER .)


state 83

    (29) while_block -> WHILE command OPEN_CB . statements CLOSE_CB
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    command                        shift and go to state 3
    statements                     shift and go to state 97
    statement                      shift and go to state 2
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    expr                           shift and go to state 12
    empty                          shift and go to state 13

state 84

    (30) while_block -> WHILE command DO . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    command                        shift and go to state 3
    statements                     shift and go to state 98
    statement                      shift and go to state 2
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    expr                           shift and go to state 12
    empty                          shift and go to state 13

state 85

    (31) for_block -> FOR ID IN . command DO statements DONE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
  ! shift/reduce conflict for DO resolved as shift
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    command                        shift and go to state 99
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    expr                           shift and go to state 12
    empty                          shift and go to state 13

state 86

    (18) if_block -> IF error THEN . NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> IF error THEN . NEWLINE statements elifs DONE
    (20) if_block -> IF error THEN . NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> IF error THEN . NEWLINE statements DONE
    NEWLINE         shift and go to state 100


state 87

    (22) if_block -> IF expr THEN . NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> IF expr THEN . NEWLINE statements elifs DONE
    (24) if_block -> IF expr THEN . NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> IF expr THEN . NEWLINE statements DONE
    NEWLINE         shift and go to state 101


state 88

    (34) expr -> OPEN_SQ list_items CLOSE_SQ .
    COLON           reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    NE              reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    EQ              reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    GE              reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    LE              reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    GT              reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    LT              reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    EXP             reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    MOD             reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    FLOORDIV        reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    TRUEDIV         reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    MUL             reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    SUB             reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    ADD             reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    SEMICOLON       reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    NEWLINE         reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    OPEN_CB         reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    DO              reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    THEN            reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    CLOSE_SQ        reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    COMMA           reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    OPEN_SQ         reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    STRING          reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    FLOAT           reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    INTEGER         reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    ID              reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    NOT             reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    TIMES           reduce using rule 34 (expr -> OPEN_SQ list_items CLOSE_SQ .)


state 89

    (66) list_items -> list_items COMMA . expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 102

state 90

    (38) expr -> COLON ID SEMICOLON .
    COLON           reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    NE              reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    EQ              reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    GE              reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    LE              reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    GT              reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    LT              reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    EXP             reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    MOD             reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    FLOORDIV        reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    TRUEDIV         reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    MUL             reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    SUB             reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    ADD             reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    SEMICOLON       reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    NEWLINE         reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    OPEN_CB         reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    DO              reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    THEN            reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    CLOSE_SQ        reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    COMMA           reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    OPEN_SQ         reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    STRING          reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    FLOAT           reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    INTEGER         reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    ID              reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    NOT             reduce using rule 38 (expr -> COLON ID SEMICOLON .)
    TIMES           reduce using rule 38 (expr -> COLON ID SEMICOLON .)


state 91

    (39) expr -> COLON ID args . SEMICOLON
    (17) args -> args . expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    SEMICOLON       shift and go to state 103
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 104

state 92

    (16) args -> expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
    SEMICOLON       reduce using rule 16 (args -> expr .)
    OPEN_SQ         reduce using rule 16 (args -> expr .)
    STRING          reduce using rule 16 (args -> expr .)
    FLOAT           reduce using rule 16 (args -> expr .)
    INTEGER         reduce using rule 16 (args -> expr .)
    ID              reduce using rule 16 (args -> expr .)
    NOT             reduce using rule 16 (args -> expr .)
    COLON           shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    FLOORDIV        shift and go to state 38
    TRUEDIV         shift and go to state 39
    MUL             shift and go to state 40
    SUB             shift and go to state 41
    ADD             shift and go to state 42


state 93

    (40) expr -> expr COLON ID SEMICOLON .
    COLON           reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    NE              reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    EQ              reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    GE              reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    LE              reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    GT              reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    LT              reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    EXP             reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    MOD             reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    FLOORDIV        reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    TRUEDIV         reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    MUL             reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    SUB             reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    ADD             reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    SEMICOLON       reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    NEWLINE         reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    OPEN_CB         reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    DO              reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    THEN            reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    CLOSE_SQ        reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    COMMA           reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    OPEN_SQ         reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    STRING          reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    FLOAT           reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    INTEGER         reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    ID              reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    NOT             reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)
    TIMES           reduce using rule 40 (expr -> expr COLON ID SEMICOLON .)


state 94

    (41) expr -> expr COLON ID args . SEMICOLON
    (17) args -> args . expr
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    SEMICOLON       shift and go to state 105
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    ID              shift and go to state 56
    NOT             shift and go to state 24
    SUB             shift and go to state 25

    expr                           shift and go to state 104

state 95

    (33) count_block -> DO NEWLINE statements expr . TIMES
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
    (14) command -> expr .
    TIMES           shift and go to state 106
    COLON           shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    FLOORDIV        shift and go to state 38
    TRUEDIV         shift and go to state 39
    MUL             shift and go to state 40
    SUB             shift and go to state 41
    ADD             shift and go to state 42
    SEMICOLON       reduce using rule 14 (command -> expr .)
    NEWLINE         reduce using rule 14 (command -> expr .)


state 96

    (42) expr -> ID .
    (60) inplace -> ID . IP_DIV expr
    (61) inplace -> ID . IP_MUL expr
    (62) inplace -> ID . IP_SUB expr
    (63) inplace -> ID . IP_ADD expr
    (58) somecrement -> ID . DECREMENT
    (59) somecrement -> ID . INCREMENT
    (64) assign -> ID . ASSIGN expr
    TIMES           reduce using rule 42 (expr -> ID .)
    COLON           reduce using rule 42 (expr -> ID .)
    NE              reduce using rule 42 (expr -> ID .)
    EQ              reduce using rule 42 (expr -> ID .)
    GE              reduce using rule 42 (expr -> ID .)
    LE              reduce using rule 42 (expr -> ID .)
    GT              reduce using rule 42 (expr -> ID .)
    LT              reduce using rule 42 (expr -> ID .)
    EXP             reduce using rule 42 (expr -> ID .)
    MOD             reduce using rule 42 (expr -> ID .)
    FLOORDIV        reduce using rule 42 (expr -> ID .)
    TRUEDIV         reduce using rule 42 (expr -> ID .)
    MUL             reduce using rule 42 (expr -> ID .)
    SUB             reduce using rule 42 (expr -> ID .)
    ADD             reduce using rule 42 (expr -> ID .)
    SEMICOLON       reduce using rule 42 (expr -> ID .)
    NEWLINE         reduce using rule 42 (expr -> ID .)
    IP_DIV          shift and go to state 43
    IP_MUL          shift and go to state 44
    IP_SUB          shift and go to state 45
    IP_ADD          shift and go to state 46
    DECREMENT       shift and go to state 47
    INCREMENT       shift and go to state 48
    ASSIGN          shift and go to state 49


state 97

    (29) while_block -> WHILE command OPEN_CB statements . CLOSE_CB
    (2) statements -> statements . statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    CLOSE_CB        shift and go to state 107
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    command                        shift and go to state 3
    statement                      shift and go to state 26
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    expr                           shift and go to state 12
    empty                          shift and go to state 13

state 98

    (30) while_block -> WHILE command DO statements . DONE
    (2) statements -> statements . statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    DONE            shift and go to state 108
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    command                        shift and go to state 3
    statement                      shift and go to state 26
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    expr                           shift and go to state 12
    empty                          shift and go to state 13

state 99

    (31) for_block -> FOR ID IN command . DO statements DONE
    DO              shift and go to state 109


state 100

    (18) if_block -> IF error THEN NEWLINE . statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> IF error THEN NEWLINE . statements elifs DONE
    (20) if_block -> IF error THEN NEWLINE . statements ELSE NEWLINE statements DONE
    (21) if_block -> IF error THEN NEWLINE . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    statements                     shift and go to state 110
    statement                      shift and go to state 2
    command                        shift and go to state 3
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    expr                           shift and go to state 12
    empty                          shift and go to state 13

state 101

    (22) if_block -> IF expr THEN NEWLINE . statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> IF expr THEN NEWLINE . statements elifs DONE
    (24) if_block -> IF expr THEN NEWLINE . statements ELSE NEWLINE statements DONE
    (25) if_block -> IF expr THEN NEWLINE . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    expr                           shift and go to state 12
    statements                     shift and go to state 111
    statement                      shift and go to state 2
    command                        shift and go to state 3
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    empty                          shift and go to state 13

state 102

    (66) list_items -> list_items COMMA expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
    CLOSE_SQ        reduce using rule 66 (list_items -> list_items COMMA expr .)
    COMMA           reduce using rule 66 (list_items -> list_items COMMA expr .)
    COLON           shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    FLOORDIV        shift and go to state 38
    TRUEDIV         shift and go to state 39
    MUL             shift and go to state 40
    SUB             shift and go to state 41
    ADD             shift and go to state 42


state 103

    (39) expr -> COLON ID args SEMICOLON .
    COLON           reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    NE              reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    EQ              reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    GE              reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    LE              reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    GT              reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    LT              reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    EXP             reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    MOD             reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    FLOORDIV        reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    TRUEDIV         reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    MUL             reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    SUB             reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    ADD             reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    SEMICOLON       reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    NEWLINE         reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    OPEN_CB         reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    DO              reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    THEN            reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    CLOSE_SQ        reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    COMMA           reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    OPEN_SQ         reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    STRING          reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    FLOAT           reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    INTEGER         reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    ID              reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    NOT             reduce using rule 39 (expr -> COLON ID args SEMICOLON .)
    TIMES           reduce using rule 39 (expr -> COLON ID args SEMICOLON .)


state 104

    (17) args -> args expr .
    (40) expr -> expr . COLON ID SEMICOLON
    (41) expr -> expr . COLON ID args SEMICOLON
    (45) expr -> expr . NE expr
    (46) expr -> expr . EQ expr
    (47) expr -> expr . GE expr
    (48) expr -> expr . LE expr
    (49) expr -> expr . GT expr
    (50) expr -> expr . LT expr
    (51) expr -> expr . EXP expr
    (52) expr -> expr . MOD expr
    (53) expr -> expr . FLOORDIV expr
    (54) expr -> expr . TRUEDIV expr
    (55) expr -> expr . MUL expr
    (56) expr -> expr . SUB expr
    (57) expr -> expr . ADD expr
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
    SEMICOLON       reduce using rule 17 (args -> args expr .)
    OPEN_SQ         reduce using rule 17 (args -> args expr .)
    STRING          reduce using rule 17 (args -> args expr .)
    FLOAT           reduce using rule 17 (args -> args expr .)
    INTEGER         reduce using rule 17 (args -> args expr .)
    ID              reduce using rule 17 (args -> args expr .)
    NOT             reduce using rule 17 (args -> args expr .)
    COLON           shift and go to state 29
    NE              shift and go to state 30
    EQ              shift and go to state 31
    GE              shift and go to state 32
    LE              shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    EXP             shift and go to state 36
    MOD             shift and go to state 37
    FLOORDIV        shift and go to state 38
    TRUEDIV         shift and go to state 39
    MUL             shift and go to state 40
    SUB             shift and go to state 41
    ADD             shift and go to state 42


state 105

    (41) expr -> expr COLON ID args SEMICOLON .
    COLON           reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    NE              reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    EQ              reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    GE              reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    LE              reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    GT              reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    LT              reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    EXP             reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    MOD             reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    FLOORDIV        reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    TRUEDIV         reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    MUL             reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    SUB             reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    ADD             reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    SEMICOLON       reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    NEWLINE         reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    OPEN_CB         reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    DO              reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    THEN            reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    CLOSE_SQ        reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    COMMA           reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    OPEN_SQ         reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    STRING          reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    FLOAT           reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    INTEGER         reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    ID              reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    NOT             reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)
    TIMES           reduce using rule 41 (expr -> expr COLON ID args SEMICOLON .)


state 106

    (33) count_block -> DO NEWLINE statements expr TIMES .
    SEMICOLON       reduce using rule 33 (count_block -> DO NEWLINE statements expr TIMES .)
    NEWLINE         reduce using rule 33 (count_block -> DO NEWLINE statements expr TIMES .)
    OPEN_CB         reduce using rule 33 (count_block -> DO NEWLINE statements expr TIMES .)
    DO              reduce using rule 33 (count_block -> DO NEWLINE statements expr TIMES .)
    THEN            reduce using rule 33 (count_block -> DO NEWLINE statements expr TIMES .)


state 107

    (29) while_block -> WHILE command OPEN_CB statements CLOSE_CB .
    SEMICOLON       reduce using rule 29 (while_block -> WHILE command OPEN_CB statements CLOSE_CB .)
    NEWLINE         reduce using rule 29 (while_block -> WHILE command OPEN_CB statements CLOSE_CB .)
    OPEN_CB         reduce using rule 29 (while_block -> WHILE command OPEN_CB statements CLOSE_CB .)
    DO              reduce using rule 29 (while_block -> WHILE command OPEN_CB statements CLOSE_CB .)
    THEN            reduce using rule 29 (while_block -> WHILE command OPEN_CB statements CLOSE_CB .)


state 108

    (30) while_block -> WHILE command DO statements DONE .
    SEMICOLON       reduce using rule 30 (while_block -> WHILE command DO statements DONE .)
    NEWLINE         reduce using rule 30 (while_block -> WHILE command DO statements DONE .)
    OPEN_CB         reduce using rule 30 (while_block -> WHILE command DO statements DONE .)
    DO              reduce using rule 30 (while_block -> WHILE command DO statements DONE .)
    THEN            reduce using rule 30 (while_block -> WHILE command DO statements DONE .)


state 109

    (31) for_block -> FOR ID IN command DO . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    command                        shift and go to state 3
    statements                     shift and go to state 112
    statement                      shift and go to state 2
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    expr                           shift and go to state 12
    empty                          shift and go to state 13

state 110

    (18) if_block -> IF error THEN NEWLINE statements . elifs ELSE NEWLINE statements DONE
    (19) if_block -> IF error THEN NEWLINE statements . elifs DONE
    (20) if_block -> IF error THEN NEWLINE statements . ELSE NEWLINE statements DONE
    (21) if_block -> IF error THEN NEWLINE statements . DONE
    (2) statements -> statements . statement
    (26) elifs -> . elif_block
    (27) elifs -> . elifs elif_block
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (28) elif_block -> . ELSE IF command THEN statements
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    ELSE            shift and go to state 114
    DONE            shift and go to state 115
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    elifs                          shift and go to state 113
    statement                      shift and go to state 26
    elif_block                     shift and go to state 116
    command                        shift and go to state 3
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    expr                           shift and go to state 12
    empty                          shift and go to state 13

state 111

    (22) if_block -> IF expr THEN NEWLINE statements . elifs ELSE NEWLINE statements DONE
    (23) if_block -> IF expr THEN NEWLINE statements . elifs DONE
    (24) if_block -> IF expr THEN NEWLINE statements . ELSE NEWLINE statements DONE
    (25) if_block -> IF expr THEN NEWLINE statements . DONE
    (2) statements -> statements . statement
    (26) elifs -> . elif_block
    (27) elifs -> . elifs elif_block
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (28) elif_block -> . ELSE IF command THEN statements
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    ELSE            shift and go to state 118
    DONE            shift and go to state 119
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    expr                           shift and go to state 12
    elifs                          shift and go to state 117
    statement                      shift and go to state 26
    elif_block                     shift and go to state 116
    command                        shift and go to state 3
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    empty                          shift and go to state 13

state 112

    (31) for_block -> FOR ID IN command DO statements . DONE
    (2) statements -> statements . statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    DONE            shift and go to state 120
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    command                        shift and go to state 3
    statement                      shift and go to state 26
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    expr                           shift and go to state 12
    empty                          shift and go to state 13

state 113

    (18) if_block -> IF error THEN NEWLINE statements elifs . ELSE NEWLINE statements DONE
    (19) if_block -> IF error THEN NEWLINE statements elifs . DONE
    (27) elifs -> elifs . elif_block
    (28) elif_block -> . ELSE IF command THEN statements
    ELSE            shift and go to state 121
    DONE            shift and go to state 122

    elif_block                     shift and go to state 123

state 114

    (20) if_block -> IF error THEN NEWLINE statements ELSE . NEWLINE statements DONE
    (28) elif_block -> ELSE . IF command THEN statements
    NEWLINE         shift and go to state 125
    IF              shift and go to state 124


state 115

    (21) if_block -> IF error THEN NEWLINE statements DONE .
    SEMICOLON       reduce using rule 21 (if_block -> IF error THEN NEWLINE statements DONE .)
    NEWLINE         reduce using rule 21 (if_block -> IF error THEN NEWLINE statements DONE .)
    OPEN_CB         reduce using rule 21 (if_block -> IF error THEN NEWLINE statements DONE .)
    DO              reduce using rule 21 (if_block -> IF error THEN NEWLINE statements DONE .)
    THEN            reduce using rule 21 (if_block -> IF error THEN NEWLINE statements DONE .)


state 116

    (26) elifs -> elif_block .
    ELSE            reduce using rule 26 (elifs -> elif_block .)
    DONE            reduce using rule 26 (elifs -> elif_block .)


state 117

    (22) if_block -> IF expr THEN NEWLINE statements elifs . ELSE NEWLINE statements DONE
    (23) if_block -> IF expr THEN NEWLINE statements elifs . DONE
    (27) elifs -> elifs . elif_block
    (28) elif_block -> . ELSE IF command THEN statements
    ELSE            shift and go to state 126
    DONE            shift and go to state 127

    elif_block                     shift and go to state 123

state 118

    (24) if_block -> IF expr THEN NEWLINE statements ELSE . NEWLINE statements DONE
    (28) elif_block -> ELSE . IF command THEN statements
    NEWLINE         shift and go to state 128
    IF              shift and go to state 124


state 119

    (25) if_block -> IF expr THEN NEWLINE statements DONE .
    SEMICOLON       reduce using rule 25 (if_block -> IF expr THEN NEWLINE statements DONE .)
    NEWLINE         reduce using rule 25 (if_block -> IF expr THEN NEWLINE statements DONE .)
    OPEN_CB         reduce using rule 25 (if_block -> IF expr THEN NEWLINE statements DONE .)
    DO              reduce using rule 25 (if_block -> IF expr THEN NEWLINE statements DONE .)
    THEN            reduce using rule 25 (if_block -> IF expr THEN NEWLINE statements DONE .)


state 120

    (31) for_block -> FOR ID IN command DO statements DONE .
    SEMICOLON       reduce using rule 31 (for_block -> FOR ID IN command DO statements DONE .)
    NEWLINE         reduce using rule 31 (for_block -> FOR ID IN command DO statements DONE .)
    OPEN_CB         reduce using rule 31 (for_block -> FOR ID IN command DO statements DONE .)
    DO              reduce using rule 31 (for_block -> FOR ID IN command DO statements DONE .)
    THEN            reduce using rule 31 (for_block -> FOR ID IN command DO statements DONE .)


state 121

    (18) if_block -> IF error THEN NEWLINE statements elifs ELSE . NEWLINE statements DONE
    (28) elif_block -> ELSE . IF command THEN statements
    NEWLINE         shift and go to state 129
    IF              shift and go to state 124


state 122

    (19) if_block -> IF error THEN NEWLINE statements elifs DONE .
    SEMICOLON       reduce using rule 19 (if_block -> IF error THEN NEWLINE statements elifs DONE .)
    NEWLINE         reduce using rule 19 (if_block -> IF error THEN NEWLINE statements elifs DONE .)
    OPEN_CB         reduce using rule 19 (if_block -> IF error THEN NEWLINE statements elifs DONE .)
    DO              reduce using rule 19 (if_block -> IF error THEN NEWLINE statements elifs DONE .)
    THEN            reduce using rule 19 (if_block -> IF error THEN NEWLINE statements elifs DONE .)


state 123

    (27) elifs -> elifs elif_block .
    ELSE            reduce using rule 27 (elifs -> elifs elif_block .)
    DONE            reduce using rule 27 (elifs -> elifs elif_block .)


state 124

    (28) elif_block -> ELSE IF . command THEN statements
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    THEN            reduce using rule 5 (empty -> .)

    command                        shift and go to state 130
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    expr                           shift and go to state 12
    empty                          shift and go to state 13

state 125

    (20) if_block -> IF error THEN NEWLINE statements ELSE NEWLINE . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    statements                     shift and go to state 131
    statement                      shift and go to state 2
    command                        shift and go to state 3
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    expr                           shift and go to state 12
    empty                          shift and go to state 13

state 126

    (22) if_block -> IF expr THEN NEWLINE statements elifs ELSE . NEWLINE statements DONE
    (28) elif_block -> ELSE . IF command THEN statements
    NEWLINE         shift and go to state 132
    IF              shift and go to state 124


state 127

    (23) if_block -> IF expr THEN NEWLINE statements elifs DONE .
    SEMICOLON       reduce using rule 23 (if_block -> IF expr THEN NEWLINE statements elifs DONE .)
    NEWLINE         reduce using rule 23 (if_block -> IF expr THEN NEWLINE statements elifs DONE .)
    OPEN_CB         reduce using rule 23 (if_block -> IF expr THEN NEWLINE statements elifs DONE .)
    DO              reduce using rule 23 (if_block -> IF expr THEN NEWLINE statements elifs DONE .)
    THEN            reduce using rule 23 (if_block -> IF expr THEN NEWLINE statements elifs DONE .)


state 128

    (24) if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    expr                           shift and go to state 12
    statements                     shift and go to state 133
    statement                      shift and go to state 2
    command                        shift and go to state 3
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    empty                          shift and go to state 13

state 129

    (18) if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    statements                     shift and go to state 134
    statement                      shift and go to state 2
    command                        shift and go to state 3
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    expr                           shift and go to state 12
    empty                          shift and go to state 13

state 130

    (28) elif_block -> ELSE IF command . THEN statements
    THEN            shift and go to state 135


state 131

    (20) if_block -> IF error THEN NEWLINE statements ELSE NEWLINE statements . DONE
    (2) statements -> statements . statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    DONE            shift and go to state 136
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    statement                      shift and go to state 26
    command                        shift and go to state 3
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    expr                           shift and go to state 12
    empty                          shift and go to state 13

state 132

    (22) if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    expr                           shift and go to state 12
    statements                     shift and go to state 137
    statement                      shift and go to state 2
    command                        shift and go to state 3
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    empty                          shift and go to state 13

state 133

    (24) if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE statements . DONE
    (2) statements -> statements . statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    DONE            shift and go to state 138
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    expr                           shift and go to state 12
    statement                      shift and go to state 26
    command                        shift and go to state 3
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    empty                          shift and go to state 13

state 134

    (18) if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE statements . DONE
    (2) statements -> statements . statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    DONE            shift and go to state 139
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    statement                      shift and go to state 26
    command                        shift and go to state 3
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    expr                           shift and go to state 12
    empty                          shift and go to state 13

state 135

    (28) elif_block -> ELSE IF command THEN . statements
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    command                        shift and go to state 3
    statements                     shift and go to state 140
    statement                      shift and go to state 2
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    expr                           shift and go to state 12
    empty                          shift and go to state 13

state 136

    (20) if_block -> IF error THEN NEWLINE statements ELSE NEWLINE statements DONE .
    SEMICOLON       reduce using rule 20 (if_block -> IF error THEN NEWLINE statements ELSE NEWLINE statements DONE .)
    NEWLINE         reduce using rule 20 (if_block -> IF error THEN NEWLINE statements ELSE NEWLINE statements DONE .)
    OPEN_CB         reduce using rule 20 (if_block -> IF error THEN NEWLINE statements ELSE NEWLINE statements DONE .)
    DO              reduce using rule 20 (if_block -> IF error THEN NEWLINE statements ELSE NEWLINE statements DONE .)
    THEN            reduce using rule 20 (if_block -> IF error THEN NEWLINE statements ELSE NEWLINE statements DONE .)


state 137

    (22) if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements . DONE
    (2) statements -> statements . statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    DONE            shift and go to state 141
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    expr                           shift and go to state 12
    statement                      shift and go to state 26
    command                        shift and go to state 3
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    empty                          shift and go to state 13

state 138

    (24) if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE .
    SEMICOLON       reduce using rule 24 (if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE .)
    NEWLINE         reduce using rule 24 (if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE .)
    OPEN_CB         reduce using rule 24 (if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE .)
    DO              reduce using rule 24 (if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE .)
    THEN            reduce using rule 24 (if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE .)


state 139

    (18) if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .
    SEMICOLON       reduce using rule 18 (if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)
    NEWLINE         reduce using rule 18 (if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)
    OPEN_CB         reduce using rule 18 (if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)
    DO              reduce using rule 18 (if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)
    THEN            reduce using rule 18 (if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)


state 140

    (28) elif_block -> ELSE IF command THEN statements .
    (2) statements -> statements . statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . inplace
    (7) command -> . somecrement
    (8) command -> . assign
    (9) command -> . count_block
    (10) command -> . forever_block
    (11) command -> . while_block
    (12) command -> . for_block
    (13) command -> . if_block
    (14) command -> . expr
    (15) command -> . empty
    (60) inplace -> . ID IP_DIV expr
    (61) inplace -> . ID IP_MUL expr
    (62) inplace -> . ID IP_SUB expr
    (63) inplace -> . ID IP_ADD expr
    (58) somecrement -> . ID DECREMENT
    (59) somecrement -> . ID INCREMENT
    (64) assign -> . ID ASSIGN expr
    (33) count_block -> . DO NEWLINE statements expr TIMES
    (32) forever_block -> . DO statements FOREVER
    (29) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (30) while_block -> . WHILE command DO statements DONE
    (31) for_block -> . FOR ID IN command DO statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (20) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (21) if_block -> . IF error THEN NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (24) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (25) if_block -> . IF expr THEN NEWLINE statements DONE
    (34) expr -> . OPEN_SQ list_items CLOSE_SQ
    (35) expr -> . STRING
    (36) expr -> . FLOAT
    (37) expr -> . INTEGER
    (38) expr -> . COLON ID SEMICOLON
    (39) expr -> . COLON ID args SEMICOLON
    (40) expr -> . expr COLON ID SEMICOLON
    (41) expr -> . expr COLON ID args SEMICOLON
    (42) expr -> . ID
    (43) expr -> . NOT expr
    (44) expr -> . SUB expr
    (45) expr -> . expr NE expr
    (46) expr -> . expr EQ expr
    (47) expr -> . expr GE expr
    (48) expr -> . expr LE expr
    (49) expr -> . expr GT expr
    (50) expr -> . expr LT expr
    (51) expr -> . expr EXP expr
    (52) expr -> . expr MOD expr
    (53) expr -> . expr FLOORDIV expr
    (54) expr -> . expr TRUEDIV expr
    (55) expr -> . expr MUL expr
    (56) expr -> . expr SUB expr
    (57) expr -> . expr ADD expr
    (5) empty -> .
    ELSE            reduce using rule 28 (elif_block -> ELSE IF command THEN statements .)
    DONE            reduce using rule 28 (elif_block -> ELSE IF command THEN statements .)
    ID              shift and go to state 14
    DO              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 18
    OPEN_SQ         shift and go to state 19
    STRING          shift and go to state 20
    FLOAT           shift and go to state 21
    INTEGER         shift and go to state 22
    COLON           shift and go to state 23
    NOT             shift and go to state 24
    SUB             shift and go to state 25
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    command                        shift and go to state 3
    statement                      shift and go to state 26
    inplace                        shift and go to state 4
    somecrement                    shift and go to state 5
    assign                         shift and go to state 6
    count_block                    shift and go to state 7
    forever_block                  shift and go to state 8
    while_block                    shift and go to state 9
    for_block                      shift and go to state 10
    if_block                       shift and go to state 11
    expr                           shift and go to state 12
    empty                          shift and go to state 13

state 141

    (22) if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .
    SEMICOLON       reduce using rule 22 (if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)
    NEWLINE         reduce using rule 22 (if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)
    OPEN_CB         reduce using rule 22 (if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)
    DO              reduce using rule 22 (if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)
    THEN            reduce using rule 22 (if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)


Conflicts:

shift/reduce conflict for NEWLINE in state 15 resolved as shift
shift/reduce conflict for DO in state 16 resolved as shift
shift/reduce conflict for COLON in state 60 resolved as shift
shift/reduce conflict for NE in state 60 resolved as shift
shift/reduce conflict for EQ in state 60 resolved as shift
shift/reduce conflict for GE in state 60 resolved as shift
shift/reduce conflict for LE in state 60 resolved as shift
shift/reduce conflict for GT in state 60 resolved as shift
shift/reduce conflict for LT in state 60 resolved as shift
shift/reduce conflict for EXP in state 60 resolved as shift
shift/reduce conflict for MOD in state 60 resolved as shift
shift/reduce conflict for FLOORDIV in state 60 resolved as shift
shift/reduce conflict for TRUEDIV in state 60 resolved as shift
shift/reduce conflict for MUL in state 60 resolved as shift
shift/reduce conflict for SUB in state 60 resolved as shift
shift/reduce conflict for ADD in state 60 resolved as shift
shift/reduce conflict for COLON in state 69 resolved as shift
shift/reduce conflict for NE in state 69 resolved as shift
shift/reduce conflict for EQ in state 69 resolved as shift
shift/reduce conflict for GE in state 69 resolved as shift
shift/reduce conflict for LE in state 69 resolved as shift
shift/reduce conflict for GT in state 69 resolved as shift
shift/reduce conflict for LT in state 69 resolved as shift
shift/reduce conflict for EXP in state 69 resolved as shift
shift/reduce conflict for MOD in state 69 resolved as shift
shift/reduce conflict for FLOORDIV in state 69 resolved as shift
shift/reduce conflict for TRUEDIV in state 69 resolved as shift
shift/reduce conflict for MUL in state 69 resolved as shift
shift/reduce conflict for SUB in state 69 resolved as shift
shift/reduce conflict for ADD in state 69 resolved as shift
shift/reduce conflict for DO in state 85 resolved as shift
shift/reduce conflict for COLON in state 92 resolved as shift
shift/reduce conflict for SUB in state 92 resolved as shift
shift/reduce conflict for COLON in state 104 resolved as shift
shift/reduce conflict for SUB in state 104 resolved as shift