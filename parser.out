Grammar:

Rule 0     S' -> statements
Rule 1     statements -> statement
Rule 2     statements -> statements statement
Rule 3     statement -> command NEWLINE
Rule 4     empty -> <empty>
Rule 5     command -> somecrement
Rule 6     command -> assign
Rule 7     command -> forever_block
Rule 8     command -> while_block
Rule 9     command -> for_block
Rule 10    command -> if_block
Rule 11    command -> expr
Rule 12    command -> empty
Rule 13    args -> expr
Rule 14    args -> args expr
Rule 15    if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
Rule 16    if_block -> IF error THEN NEWLINE statements elifs DONE
Rule 17    if_block -> IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
Rule 18    if_block -> IF error THEN NEWLINE statements DONE
Rule 19    if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
Rule 20    if_block -> IF expr THEN NEWLINE statements elifs DONE
Rule 21    if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
Rule 22    if_block -> IF expr THEN NEWLINE statements DONE
Rule 23    elifs -> elif_block
Rule 24    elifs -> elifs elif_block
Rule 25    elif_block -> ELSE IF command THEN statements
Rule 26    while_block -> WHILE command DO statements DONE
Rule 27    for_block -> FOR ID IN command DO statements DONE
Rule 28    forever_block -> DO statements FOREVER
Rule 29    expr -> STRING
Rule 30    expr -> FLOAT
Rule 31    expr -> INTEGER
Rule 32    expr -> empty COLON ID args SEMICOLON
Rule 33    expr -> ID COLON ID args SEMICOLON
Rule 34    expr -> ID
Rule 35    expr -> NOT expr
Rule 36    expr -> SUB expr  [precedence=right, level=4]
Rule 37    expr -> expr MOD expr  [precedence=left, level=3]
Rule 38    expr -> expr FLOORDIV expr  [precedence=left, level=3]
Rule 39    expr -> expr TRUEDIV expr  [precedence=left, level=3]
Rule 40    expr -> expr MUL expr  [precedence=left, level=3]
Rule 41    expr -> expr SUB expr  [precedence=left, level=2]
Rule 42    expr -> expr ADD expr  [precedence=left, level=2]
Rule 43    somecrement -> ID DECREMENT
Rule 44    somecrement -> ID INCREMENT
Rule 45    assign -> ID ASSIGN expr

Unused terminals:

    RETURN
    CLASS
    FROM
    AS
    GT
    EXP
    BUILDER
    EQ
    OPEN
    GE
    AND
    IS
    LE
    USING
    OR
    NE
    DEFINE
    LT

Terminals, with rules where they appear:

ADD                  : 42
AND                  : 
AS                   : 
ASSIGN               : 45
BUILDER              : 
CLASS                : 
COLON                : 32 33
DECREMENT            : 43
DEFINE               : 
DO                   : 26 27 28
DONE                 : 15 16 17 18 19 20 21 22 26 27
ELSE                 : 15 17 19 21 25
EQ                   : 
EXP                  : 
FLOAT                : 30
FLOORDIV             : 38
FOR                  : 27
FOREVER              : 28
FROM                 : 
GE                   : 
GT                   : 
ID                   : 27 32 33 33 34 43 44 45
IF                   : 15 16 17 18 19 20 21 22 25
IN                   : 27
INCREMENT            : 44
INTEGER              : 31
IS                   : 
LE                   : 
LT                   : 
MOD                  : 37
MUL                  : 40
NE                   : 
NEWLINE              : 3 15 15 16 17 17 18 19 19 20 21 21 22
NOT                  : 35
OPEN                 : 
OR                   : 
RETURN               : 
SEMICOLON            : 32 33
STRING               : 29
SUB                  : 36 41
THEN                 : 15 16 17 18 19 20 21 22 25
TRUEDIV              : 39
USING                : 
WHILE                : 26
error                : 15 16 17 18

Nonterminals, with rules where they appear:

args                 : 14 32 33
assign               : 6
command              : 3 25 26 27
elif_block           : 23 24
elifs                : 15 16 19 20 24
empty                : 12 32
expr                 : 11 13 14 19 20 21 22 35 36 37 37 38 38 39 39 40 40 41 41 42 42 45
for_block            : 9
forever_block        : 7
if_block             : 10
somecrement          : 5
statement            : 1 2
statements           : 2 15 15 16 17 17 18 19 19 20 21 21 22 25 26 27 28 0
while_block          : 8


state 0

    (0) S' -> . statements
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command NEWLINE
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)

    statements                     shift and go to state 1
    statement                      shift and go to state 2
    command                        shift and go to state 3
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    expr                           shift and go to state 10
    empty                          shift and go to state 11

state 1

    (0) S' -> statements .
    (2) statements -> statements . statement
    (3) statement -> . command NEWLINE
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)

    statement                      shift and go to state 22
    command                        shift and go to state 3
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    expr                           shift and go to state 10
    empty                          shift and go to state 11

state 2

    (1) statements -> statement .
    ID              reduce using rule 1 (statements -> statement .)
    DO              reduce using rule 1 (statements -> statement .)
    WHILE           reduce using rule 1 (statements -> statement .)
    FOR             reduce using rule 1 (statements -> statement .)
    IF              reduce using rule 1 (statements -> statement .)
    STRING          reduce using rule 1 (statements -> statement .)
    FLOAT           reduce using rule 1 (statements -> statement .)
    INTEGER         reduce using rule 1 (statements -> statement .)
    NOT             reduce using rule 1 (statements -> statement .)
    SUB             reduce using rule 1 (statements -> statement .)
    $end            reduce using rule 1 (statements -> statement .)
    NEWLINE         reduce using rule 1 (statements -> statement .)
    COLON           reduce using rule 1 (statements -> statement .)
    FOREVER         reduce using rule 1 (statements -> statement .)
    DONE            reduce using rule 1 (statements -> statement .)
    ELSE            reduce using rule 1 (statements -> statement .)


state 3

    (3) statement -> command . NEWLINE
    NEWLINE         shift and go to state 23


state 4

    (5) command -> somecrement .
    NEWLINE         reduce using rule 5 (command -> somecrement .)
    DO              reduce using rule 5 (command -> somecrement .)
    THEN            reduce using rule 5 (command -> somecrement .)


state 5

    (6) command -> assign .
    NEWLINE         reduce using rule 6 (command -> assign .)
    DO              reduce using rule 6 (command -> assign .)
    THEN            reduce using rule 6 (command -> assign .)


state 6

    (7) command -> forever_block .
    NEWLINE         reduce using rule 7 (command -> forever_block .)
    DO              reduce using rule 7 (command -> forever_block .)
    THEN            reduce using rule 7 (command -> forever_block .)


state 7

    (8) command -> while_block .
    NEWLINE         reduce using rule 8 (command -> while_block .)
    DO              reduce using rule 8 (command -> while_block .)
    THEN            reduce using rule 8 (command -> while_block .)


state 8

    (9) command -> for_block .
    NEWLINE         reduce using rule 9 (command -> for_block .)
    DO              reduce using rule 9 (command -> for_block .)
    THEN            reduce using rule 9 (command -> for_block .)


state 9

    (10) command -> if_block .
    NEWLINE         reduce using rule 10 (command -> if_block .)
    DO              reduce using rule 10 (command -> if_block .)
    THEN            reduce using rule 10 (command -> if_block .)


state 10

    (11) command -> expr .
    (37) expr -> expr . MOD expr
    (38) expr -> expr . FLOORDIV expr
    (39) expr -> expr . TRUEDIV expr
    (40) expr -> expr . MUL expr
    (41) expr -> expr . SUB expr
    (42) expr -> expr . ADD expr
    NEWLINE         reduce using rule 11 (command -> expr .)
    DO              reduce using rule 11 (command -> expr .)
    THEN            reduce using rule 11 (command -> expr .)
    MOD             shift and go to state 24
    FLOORDIV        shift and go to state 25
    TRUEDIV         shift and go to state 26
    MUL             shift and go to state 27
    SUB             shift and go to state 28
    ADD             shift and go to state 29


state 11

    (12) command -> empty .
    (32) expr -> empty . COLON ID args SEMICOLON
    NEWLINE         reduce using rule 12 (command -> empty .)
    DO              reduce using rule 12 (command -> empty .)
    THEN            reduce using rule 12 (command -> empty .)
    COLON           shift and go to state 30


state 12

    (43) somecrement -> ID . DECREMENT
    (44) somecrement -> ID . INCREMENT
    (45) assign -> ID . ASSIGN expr
    (33) expr -> ID . COLON ID args SEMICOLON
    (34) expr -> ID .
    DECREMENT       shift and go to state 31
    INCREMENT       shift and go to state 32
    ASSIGN          shift and go to state 33
    COLON           shift and go to state 34
    MOD             reduce using rule 34 (expr -> ID .)
    FLOORDIV        reduce using rule 34 (expr -> ID .)
    TRUEDIV         reduce using rule 34 (expr -> ID .)
    MUL             reduce using rule 34 (expr -> ID .)
    SUB             reduce using rule 34 (expr -> ID .)
    ADD             reduce using rule 34 (expr -> ID .)
    NEWLINE         reduce using rule 34 (expr -> ID .)
    DO              reduce using rule 34 (expr -> ID .)
    THEN            reduce using rule 34 (expr -> ID .)


state 13

    (28) forever_block -> DO . statements FOREVER
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command NEWLINE
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)

    statements                     shift and go to state 35
    statement                      shift and go to state 2
    command                        shift and go to state 3
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    expr                           shift and go to state 10
    empty                          shift and go to state 11

state 14

    (26) while_block -> WHILE . command DO statements DONE
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
  ! shift/reduce conflict for DO resolved as shift
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)

    command                        shift and go to state 36
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    expr                           shift and go to state 10
    empty                          shift and go to state 11

state 15

    (27) for_block -> FOR . ID IN command DO statements DONE
    ID              shift and go to state 37


state 16

    (15) if_block -> IF . error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> IF . error THEN NEWLINE statements elifs DONE
    (17) if_block -> IF . error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> IF . error THEN NEWLINE statements DONE
    (19) if_block -> IF . expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> IF . expr THEN NEWLINE statements elifs DONE
    (21) if_block -> IF . expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> IF . expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    error           shift and go to state 38
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    ID              shift and go to state 41
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)

    expr                           shift and go to state 39
    empty                          shift and go to state 40

state 17

    (29) expr -> STRING .
    MOD             reduce using rule 29 (expr -> STRING .)
    FLOORDIV        reduce using rule 29 (expr -> STRING .)
    TRUEDIV         reduce using rule 29 (expr -> STRING .)
    MUL             reduce using rule 29 (expr -> STRING .)
    SUB             reduce using rule 29 (expr -> STRING .)
    ADD             reduce using rule 29 (expr -> STRING .)
    NEWLINE         reduce using rule 29 (expr -> STRING .)
    DO              reduce using rule 29 (expr -> STRING .)
    THEN            reduce using rule 29 (expr -> STRING .)
    SEMICOLON       reduce using rule 29 (expr -> STRING .)
    STRING          reduce using rule 29 (expr -> STRING .)
    FLOAT           reduce using rule 29 (expr -> STRING .)
    INTEGER         reduce using rule 29 (expr -> STRING .)
    ID              reduce using rule 29 (expr -> STRING .)
    NOT             reduce using rule 29 (expr -> STRING .)
    COLON           reduce using rule 29 (expr -> STRING .)


state 18

    (30) expr -> FLOAT .
    MOD             reduce using rule 30 (expr -> FLOAT .)
    FLOORDIV        reduce using rule 30 (expr -> FLOAT .)
    TRUEDIV         reduce using rule 30 (expr -> FLOAT .)
    MUL             reduce using rule 30 (expr -> FLOAT .)
    SUB             reduce using rule 30 (expr -> FLOAT .)
    ADD             reduce using rule 30 (expr -> FLOAT .)
    NEWLINE         reduce using rule 30 (expr -> FLOAT .)
    DO              reduce using rule 30 (expr -> FLOAT .)
    THEN            reduce using rule 30 (expr -> FLOAT .)
    SEMICOLON       reduce using rule 30 (expr -> FLOAT .)
    STRING          reduce using rule 30 (expr -> FLOAT .)
    FLOAT           reduce using rule 30 (expr -> FLOAT .)
    INTEGER         reduce using rule 30 (expr -> FLOAT .)
    ID              reduce using rule 30 (expr -> FLOAT .)
    NOT             reduce using rule 30 (expr -> FLOAT .)
    COLON           reduce using rule 30 (expr -> FLOAT .)


state 19

    (31) expr -> INTEGER .
    MOD             reduce using rule 31 (expr -> INTEGER .)
    FLOORDIV        reduce using rule 31 (expr -> INTEGER .)
    TRUEDIV         reduce using rule 31 (expr -> INTEGER .)
    MUL             reduce using rule 31 (expr -> INTEGER .)
    SUB             reduce using rule 31 (expr -> INTEGER .)
    ADD             reduce using rule 31 (expr -> INTEGER .)
    NEWLINE         reduce using rule 31 (expr -> INTEGER .)
    DO              reduce using rule 31 (expr -> INTEGER .)
    THEN            reduce using rule 31 (expr -> INTEGER .)
    SEMICOLON       reduce using rule 31 (expr -> INTEGER .)
    STRING          reduce using rule 31 (expr -> INTEGER .)
    FLOAT           reduce using rule 31 (expr -> INTEGER .)
    INTEGER         reduce using rule 31 (expr -> INTEGER .)
    ID              reduce using rule 31 (expr -> INTEGER .)
    NOT             reduce using rule 31 (expr -> INTEGER .)
    COLON           reduce using rule 31 (expr -> INTEGER .)


state 20

    (35) expr -> NOT . expr
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    ID              shift and go to state 41
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)

    expr                           shift and go to state 42
    empty                          shift and go to state 40

state 21

    (36) expr -> SUB . expr
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    ID              shift and go to state 41
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)

    expr                           shift and go to state 43
    empty                          shift and go to state 40

state 22

    (2) statements -> statements statement .
    ID              reduce using rule 2 (statements -> statements statement .)
    DO              reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    FOR             reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    STRING          reduce using rule 2 (statements -> statements statement .)
    FLOAT           reduce using rule 2 (statements -> statements statement .)
    INTEGER         reduce using rule 2 (statements -> statements statement .)
    NOT             reduce using rule 2 (statements -> statements statement .)
    SUB             reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    NEWLINE         reduce using rule 2 (statements -> statements statement .)
    COLON           reduce using rule 2 (statements -> statements statement .)
    FOREVER         reduce using rule 2 (statements -> statements statement .)
    DONE            reduce using rule 2 (statements -> statements statement .)
    ELSE            reduce using rule 2 (statements -> statements statement .)


state 23

    (3) statement -> command NEWLINE .
    ID              reduce using rule 3 (statement -> command NEWLINE .)
    DO              reduce using rule 3 (statement -> command NEWLINE .)
    WHILE           reduce using rule 3 (statement -> command NEWLINE .)
    FOR             reduce using rule 3 (statement -> command NEWLINE .)
    IF              reduce using rule 3 (statement -> command NEWLINE .)
    STRING          reduce using rule 3 (statement -> command NEWLINE .)
    FLOAT           reduce using rule 3 (statement -> command NEWLINE .)
    INTEGER         reduce using rule 3 (statement -> command NEWLINE .)
    NOT             reduce using rule 3 (statement -> command NEWLINE .)
    SUB             reduce using rule 3 (statement -> command NEWLINE .)
    $end            reduce using rule 3 (statement -> command NEWLINE .)
    NEWLINE         reduce using rule 3 (statement -> command NEWLINE .)
    COLON           reduce using rule 3 (statement -> command NEWLINE .)
    FOREVER         reduce using rule 3 (statement -> command NEWLINE .)
    DONE            reduce using rule 3 (statement -> command NEWLINE .)
    ELSE            reduce using rule 3 (statement -> command NEWLINE .)


state 24

    (37) expr -> expr MOD . expr
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    ID              shift and go to state 41
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)

    expr                           shift and go to state 44
    empty                          shift and go to state 40

state 25

    (38) expr -> expr FLOORDIV . expr
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    ID              shift and go to state 41
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)

    expr                           shift and go to state 45
    empty                          shift and go to state 40

state 26

    (39) expr -> expr TRUEDIV . expr
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    ID              shift and go to state 41
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)

    expr                           shift and go to state 46
    empty                          shift and go to state 40

state 27

    (40) expr -> expr MUL . expr
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    ID              shift and go to state 41
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)

    expr                           shift and go to state 47
    empty                          shift and go to state 40

state 28

    (41) expr -> expr SUB . expr
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    ID              shift and go to state 41
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)

    expr                           shift and go to state 48
    empty                          shift and go to state 40

state 29

    (42) expr -> expr ADD . expr
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    ID              shift and go to state 41
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)

    expr                           shift and go to state 49
    empty                          shift and go to state 40

state 30

    (32) expr -> empty COLON . ID args SEMICOLON
    ID              shift and go to state 50


state 31

    (43) somecrement -> ID DECREMENT .
    NEWLINE         reduce using rule 43 (somecrement -> ID DECREMENT .)
    DO              reduce using rule 43 (somecrement -> ID DECREMENT .)
    THEN            reduce using rule 43 (somecrement -> ID DECREMENT .)


state 32

    (44) somecrement -> ID INCREMENT .
    NEWLINE         reduce using rule 44 (somecrement -> ID INCREMENT .)
    DO              reduce using rule 44 (somecrement -> ID INCREMENT .)
    THEN            reduce using rule 44 (somecrement -> ID INCREMENT .)


state 33

    (45) assign -> ID ASSIGN . expr
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    ID              shift and go to state 41
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)

    expr                           shift and go to state 51
    empty                          shift and go to state 40

state 34

    (33) expr -> ID COLON . ID args SEMICOLON
    ID              shift and go to state 52


state 35

    (28) forever_block -> DO statements . FOREVER
    (2) statements -> statements . statement
    (3) statement -> . command NEWLINE
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    FOREVER         shift and go to state 53
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)

    statement                      shift and go to state 22
    command                        shift and go to state 3
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    expr                           shift and go to state 10
    empty                          shift and go to state 11

state 36

    (26) while_block -> WHILE command . DO statements DONE
    DO              shift and go to state 54


state 37

    (27) for_block -> FOR ID . IN command DO statements DONE
    IN              shift and go to state 55


state 38

    (15) if_block -> IF error . THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> IF error . THEN NEWLINE statements elifs DONE
    (17) if_block -> IF error . THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> IF error . THEN NEWLINE statements DONE
    THEN            shift and go to state 56


state 39

    (19) if_block -> IF expr . THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> IF expr . THEN NEWLINE statements elifs DONE
    (21) if_block -> IF expr . THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> IF expr . THEN NEWLINE statements DONE
    (37) expr -> expr . MOD expr
    (38) expr -> expr . FLOORDIV expr
    (39) expr -> expr . TRUEDIV expr
    (40) expr -> expr . MUL expr
    (41) expr -> expr . SUB expr
    (42) expr -> expr . ADD expr
    THEN            shift and go to state 57
    MOD             shift and go to state 24
    FLOORDIV        shift and go to state 25
    TRUEDIV         shift and go to state 26
    MUL             shift and go to state 27
    SUB             shift and go to state 28
    ADD             shift and go to state 29


state 40

    (32) expr -> empty . COLON ID args SEMICOLON
    COLON           shift and go to state 30


state 41

    (33) expr -> ID . COLON ID args SEMICOLON
    (34) expr -> ID .
  ! shift/reduce conflict for COLON resolved as shift
    COLON           shift and go to state 34
    THEN            reduce using rule 34 (expr -> ID .)
    MOD             reduce using rule 34 (expr -> ID .)
    FLOORDIV        reduce using rule 34 (expr -> ID .)
    TRUEDIV         reduce using rule 34 (expr -> ID .)
    MUL             reduce using rule 34 (expr -> ID .)
    SUB             reduce using rule 34 (expr -> ID .)
    ADD             reduce using rule 34 (expr -> ID .)
    NEWLINE         reduce using rule 34 (expr -> ID .)
    DO              reduce using rule 34 (expr -> ID .)
    SEMICOLON       reduce using rule 34 (expr -> ID .)
    STRING          reduce using rule 34 (expr -> ID .)
    FLOAT           reduce using rule 34 (expr -> ID .)
    INTEGER         reduce using rule 34 (expr -> ID .)
    ID              reduce using rule 34 (expr -> ID .)
    NOT             reduce using rule 34 (expr -> ID .)


state 42

    (35) expr -> NOT expr .
    (37) expr -> expr . MOD expr
    (38) expr -> expr . FLOORDIV expr
    (39) expr -> expr . TRUEDIV expr
    (40) expr -> expr . MUL expr
    (41) expr -> expr . SUB expr
    (42) expr -> expr . ADD expr
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for FLOORDIV resolved as shift
  ! shift/reduce conflict for TRUEDIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
    NEWLINE         reduce using rule 35 (expr -> NOT expr .)
    DO              reduce using rule 35 (expr -> NOT expr .)
    THEN            reduce using rule 35 (expr -> NOT expr .)
    SEMICOLON       reduce using rule 35 (expr -> NOT expr .)
    STRING          reduce using rule 35 (expr -> NOT expr .)
    FLOAT           reduce using rule 35 (expr -> NOT expr .)
    INTEGER         reduce using rule 35 (expr -> NOT expr .)
    ID              reduce using rule 35 (expr -> NOT expr .)
    NOT             reduce using rule 35 (expr -> NOT expr .)
    COLON           reduce using rule 35 (expr -> NOT expr .)
    MOD             shift and go to state 24
    FLOORDIV        shift and go to state 25
    TRUEDIV         shift and go to state 26
    MUL             shift and go to state 27
    SUB             shift and go to state 28
    ADD             shift and go to state 29


state 43

    (36) expr -> SUB expr .
    (37) expr -> expr . MOD expr
    (38) expr -> expr . FLOORDIV expr
    (39) expr -> expr . TRUEDIV expr
    (40) expr -> expr . MUL expr
    (41) expr -> expr . SUB expr
    (42) expr -> expr . ADD expr
    MOD             reduce using rule 36 (expr -> SUB expr .)
    FLOORDIV        reduce using rule 36 (expr -> SUB expr .)
    TRUEDIV         reduce using rule 36 (expr -> SUB expr .)
    MUL             reduce using rule 36 (expr -> SUB expr .)
    SUB             reduce using rule 36 (expr -> SUB expr .)
    ADD             reduce using rule 36 (expr -> SUB expr .)
    NEWLINE         reduce using rule 36 (expr -> SUB expr .)
    DO              reduce using rule 36 (expr -> SUB expr .)
    THEN            reduce using rule 36 (expr -> SUB expr .)
    SEMICOLON       reduce using rule 36 (expr -> SUB expr .)
    STRING          reduce using rule 36 (expr -> SUB expr .)
    FLOAT           reduce using rule 36 (expr -> SUB expr .)
    INTEGER         reduce using rule 36 (expr -> SUB expr .)
    ID              reduce using rule 36 (expr -> SUB expr .)
    NOT             reduce using rule 36 (expr -> SUB expr .)
    COLON           reduce using rule 36 (expr -> SUB expr .)


state 44

    (37) expr -> expr MOD expr .
    (37) expr -> expr . MOD expr
    (38) expr -> expr . FLOORDIV expr
    (39) expr -> expr . TRUEDIV expr
    (40) expr -> expr . MUL expr
    (41) expr -> expr . SUB expr
    (42) expr -> expr . ADD expr
    MOD             reduce using rule 37 (expr -> expr MOD expr .)
    FLOORDIV        reduce using rule 37 (expr -> expr MOD expr .)
    TRUEDIV         reduce using rule 37 (expr -> expr MOD expr .)
    MUL             reduce using rule 37 (expr -> expr MOD expr .)
    SUB             reduce using rule 37 (expr -> expr MOD expr .)
    ADD             reduce using rule 37 (expr -> expr MOD expr .)
    NEWLINE         reduce using rule 37 (expr -> expr MOD expr .)
    DO              reduce using rule 37 (expr -> expr MOD expr .)
    THEN            reduce using rule 37 (expr -> expr MOD expr .)
    SEMICOLON       reduce using rule 37 (expr -> expr MOD expr .)
    STRING          reduce using rule 37 (expr -> expr MOD expr .)
    FLOAT           reduce using rule 37 (expr -> expr MOD expr .)
    INTEGER         reduce using rule 37 (expr -> expr MOD expr .)
    ID              reduce using rule 37 (expr -> expr MOD expr .)
    NOT             reduce using rule 37 (expr -> expr MOD expr .)
    COLON           reduce using rule 37 (expr -> expr MOD expr .)


state 45

    (38) expr -> expr FLOORDIV expr .
    (37) expr -> expr . MOD expr
    (38) expr -> expr . FLOORDIV expr
    (39) expr -> expr . TRUEDIV expr
    (40) expr -> expr . MUL expr
    (41) expr -> expr . SUB expr
    (42) expr -> expr . ADD expr
    MOD             reduce using rule 38 (expr -> expr FLOORDIV expr .)
    FLOORDIV        reduce using rule 38 (expr -> expr FLOORDIV expr .)
    TRUEDIV         reduce using rule 38 (expr -> expr FLOORDIV expr .)
    MUL             reduce using rule 38 (expr -> expr FLOORDIV expr .)
    SUB             reduce using rule 38 (expr -> expr FLOORDIV expr .)
    ADD             reduce using rule 38 (expr -> expr FLOORDIV expr .)
    NEWLINE         reduce using rule 38 (expr -> expr FLOORDIV expr .)
    DO              reduce using rule 38 (expr -> expr FLOORDIV expr .)
    THEN            reduce using rule 38 (expr -> expr FLOORDIV expr .)
    SEMICOLON       reduce using rule 38 (expr -> expr FLOORDIV expr .)
    STRING          reduce using rule 38 (expr -> expr FLOORDIV expr .)
    FLOAT           reduce using rule 38 (expr -> expr FLOORDIV expr .)
    INTEGER         reduce using rule 38 (expr -> expr FLOORDIV expr .)
    ID              reduce using rule 38 (expr -> expr FLOORDIV expr .)
    NOT             reduce using rule 38 (expr -> expr FLOORDIV expr .)
    COLON           reduce using rule 38 (expr -> expr FLOORDIV expr .)


state 46

    (39) expr -> expr TRUEDIV expr .
    (37) expr -> expr . MOD expr
    (38) expr -> expr . FLOORDIV expr
    (39) expr -> expr . TRUEDIV expr
    (40) expr -> expr . MUL expr
    (41) expr -> expr . SUB expr
    (42) expr -> expr . ADD expr
    MOD             reduce using rule 39 (expr -> expr TRUEDIV expr .)
    FLOORDIV        reduce using rule 39 (expr -> expr TRUEDIV expr .)
    TRUEDIV         reduce using rule 39 (expr -> expr TRUEDIV expr .)
    MUL             reduce using rule 39 (expr -> expr TRUEDIV expr .)
    SUB             reduce using rule 39 (expr -> expr TRUEDIV expr .)
    ADD             reduce using rule 39 (expr -> expr TRUEDIV expr .)
    NEWLINE         reduce using rule 39 (expr -> expr TRUEDIV expr .)
    DO              reduce using rule 39 (expr -> expr TRUEDIV expr .)
    THEN            reduce using rule 39 (expr -> expr TRUEDIV expr .)
    SEMICOLON       reduce using rule 39 (expr -> expr TRUEDIV expr .)
    STRING          reduce using rule 39 (expr -> expr TRUEDIV expr .)
    FLOAT           reduce using rule 39 (expr -> expr TRUEDIV expr .)
    INTEGER         reduce using rule 39 (expr -> expr TRUEDIV expr .)
    ID              reduce using rule 39 (expr -> expr TRUEDIV expr .)
    NOT             reduce using rule 39 (expr -> expr TRUEDIV expr .)
    COLON           reduce using rule 39 (expr -> expr TRUEDIV expr .)


state 47

    (40) expr -> expr MUL expr .
    (37) expr -> expr . MOD expr
    (38) expr -> expr . FLOORDIV expr
    (39) expr -> expr . TRUEDIV expr
    (40) expr -> expr . MUL expr
    (41) expr -> expr . SUB expr
    (42) expr -> expr . ADD expr
    MOD             reduce using rule 40 (expr -> expr MUL expr .)
    FLOORDIV        reduce using rule 40 (expr -> expr MUL expr .)
    TRUEDIV         reduce using rule 40 (expr -> expr MUL expr .)
    MUL             reduce using rule 40 (expr -> expr MUL expr .)
    SUB             reduce using rule 40 (expr -> expr MUL expr .)
    ADD             reduce using rule 40 (expr -> expr MUL expr .)
    NEWLINE         reduce using rule 40 (expr -> expr MUL expr .)
    DO              reduce using rule 40 (expr -> expr MUL expr .)
    THEN            reduce using rule 40 (expr -> expr MUL expr .)
    SEMICOLON       reduce using rule 40 (expr -> expr MUL expr .)
    STRING          reduce using rule 40 (expr -> expr MUL expr .)
    FLOAT           reduce using rule 40 (expr -> expr MUL expr .)
    INTEGER         reduce using rule 40 (expr -> expr MUL expr .)
    ID              reduce using rule 40 (expr -> expr MUL expr .)
    NOT             reduce using rule 40 (expr -> expr MUL expr .)
    COLON           reduce using rule 40 (expr -> expr MUL expr .)


state 48

    (41) expr -> expr SUB expr .
    (37) expr -> expr . MOD expr
    (38) expr -> expr . FLOORDIV expr
    (39) expr -> expr . TRUEDIV expr
    (40) expr -> expr . MUL expr
    (41) expr -> expr . SUB expr
    (42) expr -> expr . ADD expr
    SUB             reduce using rule 41 (expr -> expr SUB expr .)
    ADD             reduce using rule 41 (expr -> expr SUB expr .)
    NEWLINE         reduce using rule 41 (expr -> expr SUB expr .)
    DO              reduce using rule 41 (expr -> expr SUB expr .)
    THEN            reduce using rule 41 (expr -> expr SUB expr .)
    SEMICOLON       reduce using rule 41 (expr -> expr SUB expr .)
    STRING          reduce using rule 41 (expr -> expr SUB expr .)
    FLOAT           reduce using rule 41 (expr -> expr SUB expr .)
    INTEGER         reduce using rule 41 (expr -> expr SUB expr .)
    ID              reduce using rule 41 (expr -> expr SUB expr .)
    NOT             reduce using rule 41 (expr -> expr SUB expr .)
    COLON           reduce using rule 41 (expr -> expr SUB expr .)
    MOD             shift and go to state 24
    FLOORDIV        shift and go to state 25
    TRUEDIV         shift and go to state 26
    MUL             shift and go to state 27


state 49

    (42) expr -> expr ADD expr .
    (37) expr -> expr . MOD expr
    (38) expr -> expr . FLOORDIV expr
    (39) expr -> expr . TRUEDIV expr
    (40) expr -> expr . MUL expr
    (41) expr -> expr . SUB expr
    (42) expr -> expr . ADD expr
    SUB             reduce using rule 42 (expr -> expr ADD expr .)
    ADD             reduce using rule 42 (expr -> expr ADD expr .)
    NEWLINE         reduce using rule 42 (expr -> expr ADD expr .)
    DO              reduce using rule 42 (expr -> expr ADD expr .)
    THEN            reduce using rule 42 (expr -> expr ADD expr .)
    SEMICOLON       reduce using rule 42 (expr -> expr ADD expr .)
    STRING          reduce using rule 42 (expr -> expr ADD expr .)
    FLOAT           reduce using rule 42 (expr -> expr ADD expr .)
    INTEGER         reduce using rule 42 (expr -> expr ADD expr .)
    ID              reduce using rule 42 (expr -> expr ADD expr .)
    NOT             reduce using rule 42 (expr -> expr ADD expr .)
    COLON           reduce using rule 42 (expr -> expr ADD expr .)
    MOD             shift and go to state 24
    FLOORDIV        shift and go to state 25
    TRUEDIV         shift and go to state 26
    MUL             shift and go to state 27


state 50

    (32) expr -> empty COLON ID . args SEMICOLON
    (13) args -> . expr
    (14) args -> . args expr
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    ID              shift and go to state 41
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)

    empty                          shift and go to state 40
    args                           shift and go to state 58
    expr                           shift and go to state 59

state 51

    (45) assign -> ID ASSIGN expr .
    (37) expr -> expr . MOD expr
    (38) expr -> expr . FLOORDIV expr
    (39) expr -> expr . TRUEDIV expr
    (40) expr -> expr . MUL expr
    (41) expr -> expr . SUB expr
    (42) expr -> expr . ADD expr
    NEWLINE         reduce using rule 45 (assign -> ID ASSIGN expr .)
    DO              reduce using rule 45 (assign -> ID ASSIGN expr .)
    THEN            reduce using rule 45 (assign -> ID ASSIGN expr .)
    MOD             shift and go to state 24
    FLOORDIV        shift and go to state 25
    TRUEDIV         shift and go to state 26
    MUL             shift and go to state 27
    SUB             shift and go to state 28
    ADD             shift and go to state 29


state 52

    (33) expr -> ID COLON ID . args SEMICOLON
    (13) args -> . expr
    (14) args -> . args expr
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    ID              shift and go to state 41
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)

    args                           shift and go to state 60
    expr                           shift and go to state 59
    empty                          shift and go to state 40

state 53

    (28) forever_block -> DO statements FOREVER .
    NEWLINE         reduce using rule 28 (forever_block -> DO statements FOREVER .)
    DO              reduce using rule 28 (forever_block -> DO statements FOREVER .)
    THEN            reduce using rule 28 (forever_block -> DO statements FOREVER .)


state 54

    (26) while_block -> WHILE command DO . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command NEWLINE
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)

    command                        shift and go to state 3
    statements                     shift and go to state 61
    statement                      shift and go to state 2
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    expr                           shift and go to state 10
    empty                          shift and go to state 11

state 55

    (27) for_block -> FOR ID IN . command DO statements DONE
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
  ! shift/reduce conflict for DO resolved as shift
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)

    command                        shift and go to state 62
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    expr                           shift and go to state 10
    empty                          shift and go to state 11

state 56

    (15) if_block -> IF error THEN . NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> IF error THEN . NEWLINE statements elifs DONE
    (17) if_block -> IF error THEN . NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> IF error THEN . NEWLINE statements DONE
    NEWLINE         shift and go to state 63


state 57

    (19) if_block -> IF expr THEN . NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> IF expr THEN . NEWLINE statements elifs DONE
    (21) if_block -> IF expr THEN . NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> IF expr THEN . NEWLINE statements DONE
    NEWLINE         shift and go to state 64


state 58

    (32) expr -> empty COLON ID args . SEMICOLON
    (14) args -> args . expr
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    SEMICOLON       shift and go to state 65
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    ID              shift and go to state 41
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)

    empty                          shift and go to state 40
    expr                           shift and go to state 66

state 59

    (13) args -> expr .
    (37) expr -> expr . MOD expr
    (38) expr -> expr . FLOORDIV expr
    (39) expr -> expr . TRUEDIV expr
    (40) expr -> expr . MUL expr
    (41) expr -> expr . SUB expr
    (42) expr -> expr . ADD expr
  ! shift/reduce conflict for SUB resolved as shift
    SEMICOLON       reduce using rule 13 (args -> expr .)
    STRING          reduce using rule 13 (args -> expr .)
    FLOAT           reduce using rule 13 (args -> expr .)
    INTEGER         reduce using rule 13 (args -> expr .)
    ID              reduce using rule 13 (args -> expr .)
    NOT             reduce using rule 13 (args -> expr .)
    COLON           reduce using rule 13 (args -> expr .)
    MOD             shift and go to state 24
    FLOORDIV        shift and go to state 25
    TRUEDIV         shift and go to state 26
    MUL             shift and go to state 27
    SUB             shift and go to state 28
    ADD             shift and go to state 29


state 60

    (33) expr -> ID COLON ID args . SEMICOLON
    (14) args -> args . expr
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    SEMICOLON       shift and go to state 67
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    ID              shift and go to state 41
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)

    expr                           shift and go to state 66
    empty                          shift and go to state 40

state 61

    (26) while_block -> WHILE command DO statements . DONE
    (2) statements -> statements . statement
    (3) statement -> . command NEWLINE
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    DONE            shift and go to state 68
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)

    command                        shift and go to state 3
    statement                      shift and go to state 22
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    expr                           shift and go to state 10
    empty                          shift and go to state 11

state 62

    (27) for_block -> FOR ID IN command . DO statements DONE
    DO              shift and go to state 69


state 63

    (15) if_block -> IF error THEN NEWLINE . statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> IF error THEN NEWLINE . statements elifs DONE
    (17) if_block -> IF error THEN NEWLINE . statements ELSE NEWLINE statements DONE
    (18) if_block -> IF error THEN NEWLINE . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command NEWLINE
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)

    statements                     shift and go to state 70
    statement                      shift and go to state 2
    command                        shift and go to state 3
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    expr                           shift and go to state 10
    empty                          shift and go to state 11

state 64

    (19) if_block -> IF expr THEN NEWLINE . statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> IF expr THEN NEWLINE . statements elifs DONE
    (21) if_block -> IF expr THEN NEWLINE . statements ELSE NEWLINE statements DONE
    (22) if_block -> IF expr THEN NEWLINE . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command NEWLINE
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)

    expr                           shift and go to state 10
    statements                     shift and go to state 71
    statement                      shift and go to state 2
    command                        shift and go to state 3
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    empty                          shift and go to state 11

state 65

    (32) expr -> empty COLON ID args SEMICOLON .
    MOD             reduce using rule 32 (expr -> empty COLON ID args SEMICOLON .)
    FLOORDIV        reduce using rule 32 (expr -> empty COLON ID args SEMICOLON .)
    TRUEDIV         reduce using rule 32 (expr -> empty COLON ID args SEMICOLON .)
    MUL             reduce using rule 32 (expr -> empty COLON ID args SEMICOLON .)
    SUB             reduce using rule 32 (expr -> empty COLON ID args SEMICOLON .)
    ADD             reduce using rule 32 (expr -> empty COLON ID args SEMICOLON .)
    NEWLINE         reduce using rule 32 (expr -> empty COLON ID args SEMICOLON .)
    DO              reduce using rule 32 (expr -> empty COLON ID args SEMICOLON .)
    THEN            reduce using rule 32 (expr -> empty COLON ID args SEMICOLON .)
    SEMICOLON       reduce using rule 32 (expr -> empty COLON ID args SEMICOLON .)
    STRING          reduce using rule 32 (expr -> empty COLON ID args SEMICOLON .)
    FLOAT           reduce using rule 32 (expr -> empty COLON ID args SEMICOLON .)
    INTEGER         reduce using rule 32 (expr -> empty COLON ID args SEMICOLON .)
    ID              reduce using rule 32 (expr -> empty COLON ID args SEMICOLON .)
    NOT             reduce using rule 32 (expr -> empty COLON ID args SEMICOLON .)
    COLON           reduce using rule 32 (expr -> empty COLON ID args SEMICOLON .)


state 66

    (14) args -> args expr .
    (37) expr -> expr . MOD expr
    (38) expr -> expr . FLOORDIV expr
    (39) expr -> expr . TRUEDIV expr
    (40) expr -> expr . MUL expr
    (41) expr -> expr . SUB expr
    (42) expr -> expr . ADD expr
  ! shift/reduce conflict for SUB resolved as shift
    SEMICOLON       reduce using rule 14 (args -> args expr .)
    STRING          reduce using rule 14 (args -> args expr .)
    FLOAT           reduce using rule 14 (args -> args expr .)
    INTEGER         reduce using rule 14 (args -> args expr .)
    ID              reduce using rule 14 (args -> args expr .)
    NOT             reduce using rule 14 (args -> args expr .)
    COLON           reduce using rule 14 (args -> args expr .)
    MOD             shift and go to state 24
    FLOORDIV        shift and go to state 25
    TRUEDIV         shift and go to state 26
    MUL             shift and go to state 27
    SUB             shift and go to state 28
    ADD             shift and go to state 29


state 67

    (33) expr -> ID COLON ID args SEMICOLON .
    MOD             reduce using rule 33 (expr -> ID COLON ID args SEMICOLON .)
    FLOORDIV        reduce using rule 33 (expr -> ID COLON ID args SEMICOLON .)
    TRUEDIV         reduce using rule 33 (expr -> ID COLON ID args SEMICOLON .)
    MUL             reduce using rule 33 (expr -> ID COLON ID args SEMICOLON .)
    SUB             reduce using rule 33 (expr -> ID COLON ID args SEMICOLON .)
    ADD             reduce using rule 33 (expr -> ID COLON ID args SEMICOLON .)
    NEWLINE         reduce using rule 33 (expr -> ID COLON ID args SEMICOLON .)
    DO              reduce using rule 33 (expr -> ID COLON ID args SEMICOLON .)
    THEN            reduce using rule 33 (expr -> ID COLON ID args SEMICOLON .)
    SEMICOLON       reduce using rule 33 (expr -> ID COLON ID args SEMICOLON .)
    STRING          reduce using rule 33 (expr -> ID COLON ID args SEMICOLON .)
    FLOAT           reduce using rule 33 (expr -> ID COLON ID args SEMICOLON .)
    INTEGER         reduce using rule 33 (expr -> ID COLON ID args SEMICOLON .)
    ID              reduce using rule 33 (expr -> ID COLON ID args SEMICOLON .)
    NOT             reduce using rule 33 (expr -> ID COLON ID args SEMICOLON .)
    COLON           reduce using rule 33 (expr -> ID COLON ID args SEMICOLON .)


state 68

    (26) while_block -> WHILE command DO statements DONE .
    NEWLINE         reduce using rule 26 (while_block -> WHILE command DO statements DONE .)
    DO              reduce using rule 26 (while_block -> WHILE command DO statements DONE .)
    THEN            reduce using rule 26 (while_block -> WHILE command DO statements DONE .)


state 69

    (27) for_block -> FOR ID IN command DO . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command NEWLINE
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)

    command                        shift and go to state 3
    statements                     shift and go to state 72
    statement                      shift and go to state 2
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    expr                           shift and go to state 10
    empty                          shift and go to state 11

state 70

    (15) if_block -> IF error THEN NEWLINE statements . elifs ELSE NEWLINE statements DONE
    (16) if_block -> IF error THEN NEWLINE statements . elifs DONE
    (17) if_block -> IF error THEN NEWLINE statements . ELSE NEWLINE statements DONE
    (18) if_block -> IF error THEN NEWLINE statements . DONE
    (2) statements -> statements . statement
    (23) elifs -> . elif_block
    (24) elifs -> . elifs elif_block
    (3) statement -> . command NEWLINE
    (25) elif_block -> . ELSE IF command THEN statements
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    ELSE            shift and go to state 74
    DONE            shift and go to state 75
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)

    elifs                          shift and go to state 73
    statement                      shift and go to state 22
    elif_block                     shift and go to state 76
    command                        shift and go to state 3
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    expr                           shift and go to state 10
    empty                          shift and go to state 11

state 71

    (19) if_block -> IF expr THEN NEWLINE statements . elifs ELSE NEWLINE statements DONE
    (20) if_block -> IF expr THEN NEWLINE statements . elifs DONE
    (21) if_block -> IF expr THEN NEWLINE statements . ELSE NEWLINE statements DONE
    (22) if_block -> IF expr THEN NEWLINE statements . DONE
    (2) statements -> statements . statement
    (23) elifs -> . elif_block
    (24) elifs -> . elifs elif_block
    (3) statement -> . command NEWLINE
    (25) elif_block -> . ELSE IF command THEN statements
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    ELSE            shift and go to state 78
    DONE            shift and go to state 79
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)

    expr                           shift and go to state 10
    elifs                          shift and go to state 77
    statement                      shift and go to state 22
    elif_block                     shift and go to state 76
    command                        shift and go to state 3
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    empty                          shift and go to state 11

state 72

    (27) for_block -> FOR ID IN command DO statements . DONE
    (2) statements -> statements . statement
    (3) statement -> . command NEWLINE
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    DONE            shift and go to state 80
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)

    command                        shift and go to state 3
    statement                      shift and go to state 22
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    expr                           shift and go to state 10
    empty                          shift and go to state 11

state 73

    (15) if_block -> IF error THEN NEWLINE statements elifs . ELSE NEWLINE statements DONE
    (16) if_block -> IF error THEN NEWLINE statements elifs . DONE
    (24) elifs -> elifs . elif_block
    (25) elif_block -> . ELSE IF command THEN statements
    ELSE            shift and go to state 81
    DONE            shift and go to state 82

    elif_block                     shift and go to state 83

state 74

    (17) if_block -> IF error THEN NEWLINE statements ELSE . NEWLINE statements DONE
    (25) elif_block -> ELSE . IF command THEN statements
    NEWLINE         shift and go to state 85
    IF              shift and go to state 84


state 75

    (18) if_block -> IF error THEN NEWLINE statements DONE .
    NEWLINE         reduce using rule 18 (if_block -> IF error THEN NEWLINE statements DONE .)
    DO              reduce using rule 18 (if_block -> IF error THEN NEWLINE statements DONE .)
    THEN            reduce using rule 18 (if_block -> IF error THEN NEWLINE statements DONE .)


state 76

    (23) elifs -> elif_block .
    ELSE            reduce using rule 23 (elifs -> elif_block .)
    DONE            reduce using rule 23 (elifs -> elif_block .)


state 77

    (19) if_block -> IF expr THEN NEWLINE statements elifs . ELSE NEWLINE statements DONE
    (20) if_block -> IF expr THEN NEWLINE statements elifs . DONE
    (24) elifs -> elifs . elif_block
    (25) elif_block -> . ELSE IF command THEN statements
    ELSE            shift and go to state 86
    DONE            shift and go to state 87

    elif_block                     shift and go to state 83

state 78

    (21) if_block -> IF expr THEN NEWLINE statements ELSE . NEWLINE statements DONE
    (25) elif_block -> ELSE . IF command THEN statements
    NEWLINE         shift and go to state 88
    IF              shift and go to state 84


state 79

    (22) if_block -> IF expr THEN NEWLINE statements DONE .
    NEWLINE         reduce using rule 22 (if_block -> IF expr THEN NEWLINE statements DONE .)
    DO              reduce using rule 22 (if_block -> IF expr THEN NEWLINE statements DONE .)
    THEN            reduce using rule 22 (if_block -> IF expr THEN NEWLINE statements DONE .)


state 80

    (27) for_block -> FOR ID IN command DO statements DONE .
    NEWLINE         reduce using rule 27 (for_block -> FOR ID IN command DO statements DONE .)
    DO              reduce using rule 27 (for_block -> FOR ID IN command DO statements DONE .)
    THEN            reduce using rule 27 (for_block -> FOR ID IN command DO statements DONE .)


state 81

    (15) if_block -> IF error THEN NEWLINE statements elifs ELSE . NEWLINE statements DONE
    (25) elif_block -> ELSE . IF command THEN statements
    NEWLINE         shift and go to state 89
    IF              shift and go to state 84


state 82

    (16) if_block -> IF error THEN NEWLINE statements elifs DONE .
    NEWLINE         reduce using rule 16 (if_block -> IF error THEN NEWLINE statements elifs DONE .)
    DO              reduce using rule 16 (if_block -> IF error THEN NEWLINE statements elifs DONE .)
    THEN            reduce using rule 16 (if_block -> IF error THEN NEWLINE statements elifs DONE .)


state 83

    (24) elifs -> elifs elif_block .
    ELSE            reduce using rule 24 (elifs -> elifs elif_block .)
    DONE            reduce using rule 24 (elifs -> elifs elif_block .)


state 84

    (25) elif_block -> ELSE IF . command THEN statements
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)
    THEN            reduce using rule 4 (empty -> .)

    command                        shift and go to state 90
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    expr                           shift and go to state 10
    empty                          shift and go to state 11

state 85

    (17) if_block -> IF error THEN NEWLINE statements ELSE NEWLINE . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command NEWLINE
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)

    statements                     shift and go to state 91
    statement                      shift and go to state 2
    command                        shift and go to state 3
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    expr                           shift and go to state 10
    empty                          shift and go to state 11

state 86

    (19) if_block -> IF expr THEN NEWLINE statements elifs ELSE . NEWLINE statements DONE
    (25) elif_block -> ELSE . IF command THEN statements
    NEWLINE         shift and go to state 92
    IF              shift and go to state 84


state 87

    (20) if_block -> IF expr THEN NEWLINE statements elifs DONE .
    NEWLINE         reduce using rule 20 (if_block -> IF expr THEN NEWLINE statements elifs DONE .)
    DO              reduce using rule 20 (if_block -> IF expr THEN NEWLINE statements elifs DONE .)
    THEN            reduce using rule 20 (if_block -> IF expr THEN NEWLINE statements elifs DONE .)


state 88

    (21) if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command NEWLINE
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)

    expr                           shift and go to state 10
    statements                     shift and go to state 93
    statement                      shift and go to state 2
    command                        shift and go to state 3
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    empty                          shift and go to state 11

state 89

    (15) if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command NEWLINE
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)

    statements                     shift and go to state 94
    statement                      shift and go to state 2
    command                        shift and go to state 3
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    expr                           shift and go to state 10
    empty                          shift and go to state 11

state 90

    (25) elif_block -> ELSE IF command . THEN statements
    THEN            shift and go to state 95


state 91

    (17) if_block -> IF error THEN NEWLINE statements ELSE NEWLINE statements . DONE
    (2) statements -> statements . statement
    (3) statement -> . command NEWLINE
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    DONE            shift and go to state 96
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)

    statement                      shift and go to state 22
    command                        shift and go to state 3
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    expr                           shift and go to state 10
    empty                          shift and go to state 11

state 92

    (19) if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command NEWLINE
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)

    expr                           shift and go to state 10
    statements                     shift and go to state 97
    statement                      shift and go to state 2
    command                        shift and go to state 3
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    empty                          shift and go to state 11

state 93

    (21) if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE statements . DONE
    (2) statements -> statements . statement
    (3) statement -> . command NEWLINE
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    DONE            shift and go to state 98
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)

    expr                           shift and go to state 10
    statement                      shift and go to state 22
    command                        shift and go to state 3
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    empty                          shift and go to state 11

state 94

    (15) if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE statements . DONE
    (2) statements -> statements . statement
    (3) statement -> . command NEWLINE
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    DONE            shift and go to state 99
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)

    statement                      shift and go to state 22
    command                        shift and go to state 3
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    expr                           shift and go to state 10
    empty                          shift and go to state 11

state 95

    (25) elif_block -> ELSE IF command THEN . statements
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command NEWLINE
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)

    command                        shift and go to state 3
    statements                     shift and go to state 100
    statement                      shift and go to state 2
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    expr                           shift and go to state 10
    empty                          shift and go to state 11

state 96

    (17) if_block -> IF error THEN NEWLINE statements ELSE NEWLINE statements DONE .
    NEWLINE         reduce using rule 17 (if_block -> IF error THEN NEWLINE statements ELSE NEWLINE statements DONE .)
    DO              reduce using rule 17 (if_block -> IF error THEN NEWLINE statements ELSE NEWLINE statements DONE .)
    THEN            reduce using rule 17 (if_block -> IF error THEN NEWLINE statements ELSE NEWLINE statements DONE .)


state 97

    (19) if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements . DONE
    (2) statements -> statements . statement
    (3) statement -> . command NEWLINE
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    DONE            shift and go to state 101
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)

    expr                           shift and go to state 10
    statement                      shift and go to state 22
    command                        shift and go to state 3
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    empty                          shift and go to state 11

state 98

    (21) if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE .
    NEWLINE         reduce using rule 21 (if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE .)
    DO              reduce using rule 21 (if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE .)
    THEN            reduce using rule 21 (if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE .)


state 99

    (15) if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .
    NEWLINE         reduce using rule 15 (if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)
    DO              reduce using rule 15 (if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)
    THEN            reduce using rule 15 (if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)


state 100

    (25) elif_block -> ELSE IF command THEN statements .
    (2) statements -> statements . statement
    (3) statement -> . command NEWLINE
    (5) command -> . somecrement
    (6) command -> . assign
    (7) command -> . forever_block
    (8) command -> . while_block
    (9) command -> . for_block
    (10) command -> . if_block
    (11) command -> . expr
    (12) command -> . empty
    (43) somecrement -> . ID DECREMENT
    (44) somecrement -> . ID INCREMENT
    (45) assign -> . ID ASSIGN expr
    (28) forever_block -> . DO statements FOREVER
    (26) while_block -> . WHILE command DO statements DONE
    (27) for_block -> . FOR ID IN command DO statements DONE
    (15) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (16) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (17) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (18) if_block -> . IF error THEN NEWLINE statements DONE
    (19) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF expr THEN NEWLINE statements DONE
    (29) expr -> . STRING
    (30) expr -> . FLOAT
    (31) expr -> . INTEGER
    (32) expr -> . empty COLON ID args SEMICOLON
    (33) expr -> . ID COLON ID args SEMICOLON
    (34) expr -> . ID
    (35) expr -> . NOT expr
    (36) expr -> . SUB expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr FLOORDIV expr
    (39) expr -> . expr TRUEDIV expr
    (40) expr -> . expr MUL expr
    (41) expr -> . expr SUB expr
    (42) expr -> . expr ADD expr
    (4) empty -> .
    ELSE            reduce using rule 25 (elif_block -> ELSE IF command THEN statements .)
    DONE            reduce using rule 25 (elif_block -> ELSE IF command THEN statements .)
    ID              shift and go to state 12
    DO              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    IF              shift and go to state 16
    STRING          shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19
    NOT             shift and go to state 20
    SUB             shift and go to state 21
    COLON           reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)

    command                        shift and go to state 3
    statement                      shift and go to state 22
    somecrement                    shift and go to state 4
    assign                         shift and go to state 5
    forever_block                  shift and go to state 6
    while_block                    shift and go to state 7
    for_block                      shift and go to state 8
    if_block                       shift and go to state 9
    expr                           shift and go to state 10
    empty                          shift and go to state 11

state 101

    (19) if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .
    NEWLINE         reduce using rule 19 (if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)
    DO              reduce using rule 19 (if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)
    THEN            reduce using rule 19 (if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)


Conflicts:

shift/reduce conflict for DO in state 14 resolved as shift
shift/reduce conflict for COLON in state 41 resolved as shift
shift/reduce conflict for MOD in state 42 resolved as shift
shift/reduce conflict for FLOORDIV in state 42 resolved as shift
shift/reduce conflict for TRUEDIV in state 42 resolved as shift
shift/reduce conflict for MUL in state 42 resolved as shift
shift/reduce conflict for SUB in state 42 resolved as shift
shift/reduce conflict for ADD in state 42 resolved as shift
shift/reduce conflict for DO in state 55 resolved as shift
shift/reduce conflict for SUB in state 59 resolved as shift
shift/reduce conflict for SUB in state 66 resolved as shift